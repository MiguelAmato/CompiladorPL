
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package c_ast_ascendente;

import java_cup.runtime.*;
import asint.ClaseSemanticaEval;
import c_ast_ascendente.UnidadLexica.StringLocalizado;
import asint.SintaxisAbstractaEval.*;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ASTS_A extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ClaseLexica.class;
}

  /** Default constructor. */
  @Deprecated
  public ASTS_A() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ASTS_A(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ASTS_A(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\006\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\005\000\002\004\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\004\000\002\007\005\000\002\010\010\000\002" +
    "\011\003\000\002\011\002\000\002\012\005\000\002\012" +
    "\003\000\002\013\004\000\002\013\005\000\002\014\006" +
    "\000\002\014\003\000\002\015\003\000\002\015\004\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\017" +
    "\006\000\002\020\005\000\002\020\003\000\002\021\004" +
    "\000\002\022\003\000\002\022\002\000\002\023\005\000" +
    "\002\023\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\025\004\000\002\026\005\000" +
    "\002\026\007\000\002\027\005\000\002\030\004\000\002" +
    "\031\004\000\002\032\003\000\002\033\004\000\002\034" +
    "\004\000\002\035\007\000\002\037\003\000\002\037\002" +
    "\000\002\040\005\000\002\040\003\000\002\036\003\000" +
    "\002\041\005\000\002\041\003\000\002\042\005\000\002" +
    "\042\003\000\002\043\005\000\002\043\005\000\002\043" +
    "\003\000\002\044\005\000\002\044\005\000\002\044\003" +
    "\000\002\045\005\000\002\045\003\000\002\046\004\000" +
    "\002\046\003\000\002\047\006\000\002\047\005\000\002" +
    "\047\004\000\002\047\003\000\002\050\005\000\002\050" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\054\003\000\002\054\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\004\033\005\001\002\000\004\002\230\001" +
    "\002\000\052\004\010\005\025\006\024\007\016\010\020" +
    "\011\ufffe\013\ufffe\014\007\015\ufffe\016\ufffe\017\ufffe\020" +
    "\ufffe\021\ufffe\022\015\023\ufffe\025\ufffe\033\ufffe\034\ufffe" +
    "\037\022\047\017\001\002\000\006\037\227\046\206\001" +
    "\002\000\004\033\217\001\002\000\010\035\uffeb\037\uffeb" +
    "\046\uffeb\001\002\000\006\030\ufffa\036\ufffa\001\002\000" +
    "\006\030\ufff9\036\ufff9\001\002\000\010\035\uffe6\037\uffe6" +
    "\046\uffe6\001\002\000\006\030\ufffc\036\ufffc\001\002\000" +
    "\020\004\010\005\025\006\024\007\016\014\007\037\022" +
    "\047\017\001\002\000\010\035\uffe8\037\uffe8\046\uffe8\001" +
    "\002\000\020\004\010\005\025\006\024\007\016\014\007" +
    "\037\022\047\017\001\002\000\004\037\174\001\002\000" +
    "\030\011\047\013\041\015\056\016\057\017\036\020\050" +
    "\021\061\023\042\025\046\033\005\034\uffe0\001\002\000" +
    "\010\035\uffe7\037\uffe7\046\uffe7\001\002\000\006\030\ufffb" +
    "\036\ufffb\001\002\000\010\035\uffe9\037\uffe9\046\uffe9\001" +
    "\002\000\010\035\uffea\037\uffea\046\uffea\001\002\000\010" +
    "\035\uffed\037\uffed\046\uffed\001\002\000\010\035\uffee\037" +
    "\uffee\046\uffee\001\002\000\006\030\032\036\031\001\002" +
    "\000\030\011\uffff\013\uffff\015\uffff\016\uffff\017\uffff\020" +
    "\uffff\021\uffff\023\uffff\025\uffff\033\uffff\034\uffff\001\002" +
    "\000\024\004\010\005\025\006\024\007\016\010\020\014" +
    "\007\022\015\037\022\047\017\001\002\000\006\030\ufffd" +
    "\036\ufffd\001\002\000\006\030\uffd4\034\uffd4\001\002\000" +
    "\006\030\uffd8\034\uffd8\001\002\000\026\024\066\037\102" +
    "\040\100\041\076\042\105\043\104\044\065\045\101\051" +
    "\106\057\063\001\002\000\006\030\uffd5\034\uffd5\001\002" +
    "\000\006\030\uffd6\034\uffd6\001\002\000\026\024\066\037" +
    "\102\040\100\041\076\042\105\043\104\044\065\045\101" +
    "\051\106\057\063\001\002\000\004\037\161\001\002\000" +
    "\006\030\uffdb\034\uffdb\001\002\000\006\030\uffde\034\uffde" +
    "\001\002\000\006\030\uffdd\034\uffdd\001\002\000\026\024" +
    "\066\037\102\040\100\041\076\042\105\043\104\044\065" +
    "\045\101\051\106\057\063\001\002\000\026\024\066\037" +
    "\102\040\100\041\076\042\105\043\104\044\065\045\101" +
    "\051\106\057\063\001\002\000\026\024\066\037\102\040" +
    "\100\041\076\042\105\043\104\044\065\045\101\051\106" +
    "\057\063\001\002\000\006\030\uffc5\034\uffc5\001\002\000" +
    "\006\030\uffd9\034\uffd9\001\002\000\006\030\uffdc\034\uffdc" +
    "\001\002\000\004\034\152\001\002\000\006\030\150\034" +
    "\uffe1\001\002\000\026\024\066\037\102\040\100\041\076" +
    "\042\105\043\104\044\065\045\101\051\106\057\063\001" +
    "\002\000\026\024\066\037\102\040\100\041\076\042\105" +
    "\043\104\044\065\045\101\051\106\057\063\001\002\000" +
    "\006\030\uffd7\034\uffd7\001\002\000\006\030\uffcd\034\uffcd" +
    "\001\002\000\006\030\uffda\034\uffda\001\002\000\026\024" +
    "\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6" +
    "\045\uffa6\051\uffa6\057\uffa6\001\002\000\060\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\046\uffb3" +
    "\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055" +
    "\uffb3\056\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3" +
    "\065\uffb3\066\uffb3\001\002\000\060\026\uffa3\027\uffa3\030" +
    "\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\046\uffa3\047\uffa3" +
    "\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056" +
    "\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3" +
    "\066\uffa3\001\002\000\026\024\066\037\102\040\100\041" +
    "\076\042\105\043\104\044\065\045\101\051\106\057\063" +
    "\001\002\000\060\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032" +
    "\137\033\uffb7\034\uffb7\046\141\047\140\050\uffb7\051\uffb7" +
    "\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\060\uffb7\061" +
    "\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\001\002" +
    "\000\052\026\uffb9\027\uffb9\030\uffb9\031\uffb9\033\uffb9\034" +
    "\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9" +
    "\056\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065" +
    "\uffb9\066\uffb9\001\002\000\052\026\uffbb\027\uffbb\030\uffbb" +
    "\031\uffbb\033\uffbb\034\uffbb\050\uffbb\051\uffbb\052\126\053" +
    "\132\054\131\055\130\056\133\060\uffbb\061\uffbb\062\uffbb" +
    "\063\uffbb\064\uffbb\065\uffbb\066\uffbb\001\002\000\040\026" +
    "\uffbe\027\uffbe\030\uffbe\031\uffbe\033\uffbe\034\uffbe\050\uffbe" +
    "\051\124\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065" +
    "\uffbe\066\uffbe\001\002\000\036\026\uffc1\027\uffc1\030\uffc1" +
    "\031\uffc1\033\uffc1\034\uffc1\050\121\060\uffc1\061\uffc1\062" +
    "\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\001\002\000\034" +
    "\026\uffc3\027\uffc3\030\uffc3\031\uffc3\033\uffc3\034\uffc3\060" +
    "\114\061\115\062\111\063\110\064\113\065\112\066\116" +
    "\001\002\000\006\030\uffcb\034\uffcb\001\002\000\060\026" +
    "\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4" +
    "\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054" +
    "\uffa4\055\uffa4\056\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4" +
    "\064\uffa4\065\uffa4\066\uffa4\001\002\000\026\024\066\037" +
    "\102\040\100\041\076\042\105\043\104\044\065\045\101" +
    "\051\106\057\063\001\002\000\060\026\uffa5\027\uffa5\030" +
    "\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\046\uffa5\047\uffa5" +
    "\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056" +
    "\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5" +
    "\066\uffa5\001\002\000\060\026\uffa2\027\uffa2\030\uffa2\031" +
    "\uffa2\032\uffa2\033\uffa2\034\uffa2\046\uffa2\047\uffa2\050\uffa2" +
    "\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\060" +
    "\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2" +
    "\001\002\000\060\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032" +
    "\uffa0\033\uffa0\034\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0" +
    "\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\060\uffa0\061" +
    "\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0\001\002" +
    "\000\060\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033" +
    "\uffb1\034\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1" +
    "\053\uffb1\054\uffb1\055\uffb1\056\uffb1\060\uffb1\061\uffb1\062" +
    "\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1\001\002\000\060" +
    "\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034" +
    "\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f" +
    "\054\uff9f\055\uff9f\056\uff9f\060\uff9f\061\uff9f\062\uff9f\063" +
    "\uff9f\064\uff9f\065\uff9f\066\uff9f\001\002\000\060\026\uffa1" +
    "\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\046" +
    "\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1" +
    "\055\uffa1\056\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\064" +
    "\uffa1\065\uffa1\066\uffa1\001\002\000\026\024\uffa7\037\uffa7" +
    "\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\051" +
    "\uffa7\057\uffa7\001\002\000\052\026\uffb8\027\uffb8\030\uffb8" +
    "\031\uffb8\033\uffb8\034\uffb8\050\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\054\uffb8\055\uffb8\056\uffb8\060\uffb8\061\uffb8\062\uffb8" +
    "\063\uffb8\064\uffb8\065\uffb8\066\uffb8\001\002\000\026\024" +
    "\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf" +
    "\045\uffaf\051\uffaf\057\uffaf\001\002\000\026\024\uffad\037" +
    "\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad" +
    "\051\uffad\057\uffad\001\002\000\026\024\uffab\037\uffab\040" +
    "\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\051\uffab" +
    "\057\uffab\001\002\000\026\024\uffac\037\uffac\040\uffac\041" +
    "\uffac\042\uffac\043\uffac\044\uffac\045\uffac\051\uffac\057\uffac" +
    "\001\002\000\026\024\uffae\037\uffae\040\uffae\041\uffae\042" +
    "\uffae\043\uffae\044\uffae\045\uffae\051\uffae\057\uffae\001\002" +
    "\000\026\024\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043" +
    "\uffb0\044\uffb0\045\uffb0\051\uffb0\057\uffb0\001\002\000\026" +
    "\024\066\037\102\040\100\041\076\042\105\043\104\044" +
    "\065\045\101\051\106\057\063\001\002\000\026\024\066" +
    "\037\102\040\100\041\076\042\105\043\104\044\065\045" +
    "\101\051\106\057\063\001\002\000\036\026\uffc2\027\uffc2" +
    "\030\uffc2\031\uffc2\033\uffc2\034\uffc2\050\121\060\uffc2\061" +
    "\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\001\002" +
    "\000\026\024\066\037\102\040\100\041\076\042\105\043" +
    "\104\044\065\045\101\051\106\057\063\001\002\000\036" +
    "\026\uffc0\027\uffc0\030\uffc0\031\uffc0\033\uffc0\034\uffc0\050" +
    "\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0" +
    "\066\uffc0\001\002\000\016\026\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\033\uffc4\034\uffc4\001\002\000\026\024\066\037\102" +
    "\040\100\041\076\042\105\043\104\044\065\045\101\051" +
    "\106\057\063\001\002\000\036\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\033\uffbf\034\uffbf\050\uffbf\060\uffbf\061\uffbf\062" +
    "\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\001\002\000\026" +
    "\024\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044" +
    "\uffaa\045\uffaa\051\uffaa\057\uffaa\001\002\000\026\024\066" +
    "\037\102\040\100\041\076\042\105\043\104\044\065\045" +
    "\101\051\106\057\063\001\002\000\026\024\066\037\102" +
    "\040\100\041\076\042\105\043\104\044\065\045\101\051" +
    "\106\057\063\001\002\000\026\024\uffa8\037\uffa8\040\uffa8" +
    "\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\051\uffa8\057" +
    "\uffa8\001\002\000\026\024\uffa9\037\uffa9\040\uffa9\041\uffa9" +
    "\042\uffa9\043\uffa9\044\uffa9\045\uffa9\051\uffa9\057\uffa9\001" +
    "\002\000\026\024\066\037\102\040\100\041\076\042\105" +
    "\043\104\044\065\045\101\051\106\057\063\001\002\000" +
    "\046\026\uffbc\027\uffbc\030\uffbc\031\uffbc\033\uffbc\034\uffbc" +
    "\050\uffbc\051\uffbc\052\126\053\132\054\131\060\uffbc\061" +
    "\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc\001\002" +
    "\000\040\026\uffbd\027\uffbd\030\uffbd\031\uffbd\033\uffbd\034" +
    "\uffbd\050\uffbd\051\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd" +
    "\064\uffbd\065\uffbd\066\uffbd\001\002\000\052\026\uffba\027" +
    "\uffba\030\uffba\031\uffba\033\uffba\034\uffba\050\uffba\051\uffba" +
    "\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba\060\uffba\061" +
    "\uffba\062\uffba\063\uffba\064\uffba\065\uffba\066\uffba\001\002" +
    "\000\004\037\144\001\002\000\060\026\uffb4\027\uffb4\030" +
    "\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\046\uffb4\047\uffb4" +
    "\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056" +
    "\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4" +
    "\066\uffb4\001\002\000\026\024\066\037\102\040\100\041" +
    "\076\042\105\043\104\044\065\045\101\051\106\057\063" +
    "\001\002\000\004\031\143\001\002\000\060\026\uffb6\027" +
    "\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\046\uffb6" +
    "\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055" +
    "\uffb6\056\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6" +
    "\065\uffb6\066\uffb6\001\002\000\060\026\uffb5\027\uffb5\030" +
    "\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\046\uffb5\047\uffb5" +
    "\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056" +
    "\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5" +
    "\066\uffb5\001\002\000\004\026\146\001\002\000\060\026" +
    "\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2" +
    "\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054" +
    "\uffb2\055\uffb2\056\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2" +
    "\064\uffb2\065\uffb2\066\uffb2\001\002\000\006\030\uffcc\034" +
    "\uffcc\001\002\000\026\011\047\013\041\015\056\016\057" +
    "\017\036\020\050\021\061\023\042\025\046\033\005\001" +
    "\002\000\006\030\uffdf\034\uffdf\001\002\000\014\002\001" +
    "\012\001\030\001\034\001\036\001\001\002\000\006\030" +
    "\uffce\034\uffce\001\002\000\004\033\005\001\002\000\010" +
    "\012\156\030\uffd2\034\uffd2\001\002\000\004\033\005\001" +
    "\002\000\006\030\uffd1\034\uffd1\001\002\000\006\030\uffd3" +
    "\034\uffd3\001\002\000\004\024\162\001\002\000\030\024" +
    "\066\026\uffc8\037\102\040\100\041\076\042\105\043\104" +
    "\044\065\045\101\051\106\057\063\001\002\000\006\026" +
    "\uffc9\027\167\001\002\000\006\026\uffc6\027\uffc6\001\002" +
    "\000\004\026\166\001\002\000\006\030\uffca\034\uffca\001" +
    "\002\000\026\024\066\037\102\040\100\041\076\042\105" +
    "\043\104\044\065\045\101\051\106\057\063\001\002\000" +
    "\006\026\uffc7\027\uffc7\001\002\000\004\033\005\001\002" +
    "\000\006\030\uffd0\034\uffd0\001\002\000\006\030\uffcf\034" +
    "\uffcf\001\002\000\004\024\175\001\002\000\022\004\010" +
    "\005\025\006\024\007\016\014\007\026\ufff4\037\022\047" +
    "\017\001\002\000\004\026\212\001\002\000\006\026\ufff2" +
    "\027\ufff2\001\002\000\010\035\204\037\205\046\206\001" +
    "\002\000\006\026\ufff5\027\202\001\002\000\020\004\010" +
    "\005\025\006\024\007\016\014\007\037\022\047\017\001" +
    "\002\000\006\026\ufff3\027\ufff3\001\002\000\004\037\211" +
    "\001\002\000\006\026\ufff1\027\ufff1\001\002\000\004\040" +
    "\207\001\002\000\004\031\210\001\002\000\010\035\uffef" +
    "\037\uffef\046\uffef\001\002\000\006\026\ufff0\027\ufff0\001" +
    "\002\000\004\033\005\001\002\000\006\030\ufff6\036\ufff6" +
    "\001\002\000\010\035\uffec\037\uffec\046\uffec\001\002\000" +
    "\006\037\216\046\206\001\002\000\006\030\ufff7\036\ufff7" +
    "\001\002\000\020\004\010\005\025\006\024\007\016\014" +
    "\007\037\022\047\017\001\002\000\006\027\224\034\225" +
    "\001\002\000\006\037\223\046\206\001\002\000\006\027" +
    "\uffe3\034\uffe3\001\002\000\006\027\uffe2\034\uffe2\001\002" +
    "\000\020\004\010\005\025\006\024\007\016\014\007\037" +
    "\022\047\017\001\002\000\010\035\uffe5\037\uffe5\046\uffe5" +
    "\001\002\000\006\027\uffe4\034\uffe4\001\002\000\006\030" +
    "\ufff8\036\ufff8\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\004\002\003\001\001\000\002\001\001\000" +
    "\026\003\020\004\027\005\013\006\022\007\010\010\011" +
    "\014\005\015\026\016\025\017\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\014\214\015\026\016\025\017\012\001\001\000\002" +
    "\001\001\000\010\015\213\016\025\017\012\001\001\000" +
    "\002\001\001\000\036\002\050\022\053\023\054\024\043" +
    "\025\044\026\052\027\042\030\061\031\051\032\034\033" +
    "\057\034\037\035\036\036\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\005\032\006\022\007\010\010\011\014" +
    "\005\015\026\016\025\017\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\041\172\042" +
    "\073\043\072\044\071\045\070\046\067\047\066\050\063" +
    "\051\102\054\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\041\170\042\073\043\072\044\071\045\070" +
    "\046\067\047\066\050\063\051\102\054\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\041\157\042\073\043\072\044\071\045" +
    "\070\046\067\047\066\050\063\051\102\054\076\001\001" +
    "\000\026\041\153\042\073\043\072\044\071\045\070\046" +
    "\067\047\066\050\063\051\102\054\076\001\001\000\026" +
    "\041\152\042\073\043\072\044\071\045\070\046\067\047" +
    "\066\050\063\051\102\054\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\041\146\042\073\043\072\044\071" +
    "\045\070\046\067\047\066\050\063\051\102\054\076\001" +
    "\001\000\026\041\074\042\073\043\072\044\071\045\070" +
    "\046\067\047\066\050\063\051\102\054\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\041" +
    "\144\042\073\043\072\044\071\045\070\046\067\047\066" +
    "\050\063\051\102\054\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\046\106\047\066\050\063" +
    "\051\102\054\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\041" +
    "\122\042\073\043\072\044\071\045\070\046\067\047\066" +
    "\050\063\051\102\054\076\001\001\000\022\043\117\044" +
    "\071\045\070\046\067\047\066\050\063\051\102\054\076" +
    "\001\001\000\002\001\001\000\020\044\121\045\070\046" +
    "\067\047\066\050\063\051\102\054\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\044\124\045\070\046" +
    "\067\047\066\050\063\051\102\054\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\046\135\047\066\050" +
    "\063\051\102\054\076\001\001\000\020\044\134\045\070" +
    "\046\067\047\066\050\063\051\102\054\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\045\133\046\067" +
    "\047\066\050\063\051\102\054\076\001\001\000\004\053" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\041\141\042\073\043" +
    "\072\044\071\045\070\046\067\047\066\050\063\051\102" +
    "\054\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\002\050\024\150\025\044\026\052\027" +
    "\042\030\061\031\051\032\034\033\057\034\037\035\036" +
    "\036\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\154\001\001\000\002\001\001" +
    "\000\004\002\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\037\164\040\162\041\163" +
    "\042\073\043\072\044\071\045\070\046\067\047\066\050" +
    "\063\051\102\054\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\041" +
    "\167\042\073\043\072\044\071\045\070\046\067\047\066" +
    "\050\063\051\102\054\076\001\001\000\002\001\001\000" +
    "\004\002\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\011\175\012\200\013\176\014" +
    "\177\015\026\016\025\017\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\013\202\014\177\015\026\016\025\017\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\212\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\014\220\015\026\016\025\017\012\020\217\021\221\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\014\220\015\026\016\025\017" +
    "\012\021\225\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ASTS_A$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ASTS_A$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ASTS_A$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresEval();
   AnalizadorLexico alex = (AnalizadorLexico)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
  return getScanner().next_token(); 

    }

 
   private GestionErroresEval errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ASTS_A$actions {


  ClaseSemanticaEval sem = new ClaseSemanticaEval();

  private final ASTS_A parser;

  /** Constructor */
  CUP$ASTS_A$actions(ASTS_A parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ASTS_A$do_action_part00000000(
    int                        CUP$ASTS_A$act_num,
    java_cup.runtime.lr_parser CUP$ASTS_A$parser,
    java.util.Stack            CUP$ASTS_A$stack,
    int                        CUP$ASTS_A$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ASTS_A$result;

      /* select the action based on the action number */
      switch (CUP$ASTS_A$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= LLAVE_APERTURA declaraciones_opt instrucciones_opt LLAVE_CIERRE 
            {
              Prog RESULT =null;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-2)).value;
		InstrOpt instrOpt = (InstrOpt)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-1)).value;
		 RESULT = sem.prog(decs, instrOpt); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("programa",0, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-1)).value;
		RESULT = start_val;
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ASTS_A$parser.done_parsing();
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaraciones_opt ::= lista_declaraciones CAMBIO_DE_SECUENCIA 
            {
              Decs RESULT =null;
		LDecs lDecs = (LDecs)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-1)).value;
		 RESULT = sem.si_decs(lDecs); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("declaraciones_opt",1, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones_opt ::= 
            {
              Decs RESULT =null;
		 RESULT = sem.no_decs(); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("declaraciones_opt",1, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_declaraciones ::= lista_declaraciones PUNTO_Y_COMA declaracion 
            {
              LDecs RESULT =null;
		LDecs lDecs = (LDecs)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-2)).value;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = sem.muchas_decs(lDecs, dec); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",2, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_declaraciones ::= declaracion 
            {
              LDecs RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = sem.una_dec(dec); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",2, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion ::= declaracion_variable 
            {
              Dec RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = dec; 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("declaracion",3, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= declaracion_tipo 
            {
              Dec RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = dec; 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("declaracion",3, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= declaracion_proc 
            {
              Dec RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = dec; 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("declaracion",3, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion_variable ::= tipo IDENTIFICADOR 
            {
              Dec RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = (Dec) sem.dec_id(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("declaracion_variable",4, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion_tipo ::= TYPE tipo IDENTIFICADOR 
            {
              Dec RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = (Dec) sem.dec_type(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",5, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion_proc ::= PROC IDENTIFICADOR PARENTESIS_APERTURA parametros_formales PARENTESIS_CIERRE programa 
            {
              Dec RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-4)).value;
		ParamF paramF = (ParamF)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-2)).value;
		Prog prog = (Prog)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = (Dec) sem.dec_proc(id.str(), paramF, prog).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("declaracion_proc",6, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametros_formales ::= lista_parametros 
            {
              ParamF RESULT =null;
		LParam lParam = (LParam)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = sem.si_parF(lParam); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("parametros_formales",7, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametros_formales ::= 
            {
              ParamF RESULT =null;
		 RESULT = sem.no_parF(); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("parametros_formales",7, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_parametros ::= lista_parametros COMA parametro 
            {
              LParam RESULT =null;
		LParam lParam = (LParam)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-2)).value;
		Param param = (Param)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = sem.muchos_param(lParam, param); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("lista_parametros",8, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_parametros ::= parametro 
            {
              LParam RESULT =null;
		Param param = (Param)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = sem.un_param(param); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("lista_parametros",8, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametro ::= tipo IDENTIFICADOR 
            {
              Param RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = (Param) sem.param_cop(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("parametro",9, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametro ::= tipo REFERENCIA IDENTIFICADOR 
            {
              Param RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = (Param) sem.param_ref(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("parametro",9, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo ::= tipo CORCHETE_APERTURA LITERAL_ENTERO CORCHETE_CIERRE 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-3)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-1)).value;
		 RESULT = (Tipo) sem.tipo_array(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("tipo",10, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= tipo1 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = tipo; 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("tipo",10, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo1 ::= tipo2 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = tipo; 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("tipo1",11, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo1 ::= PUNTERO tipo1 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = sem.tipo_punt(tipo); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("tipo1",11, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo1 ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_int(); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("tipo1",11, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo1 ::= REAL 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_real(); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("tipo1",11, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo1 ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_bool(); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("tipo1",11, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo1 ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_string(); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("tipo1",11, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipo1 ::= IDENTIFICADOR 
            {
              Tipo RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = (Tipo) sem.tipo_id(id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("tipo1",11, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipo1 ::= tipo_struct 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = tipo; 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("tipo1",11, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo_struct ::= STRUCT LLAVE_APERTURA lista_struct LLAVE_CIERRE 
            {
              Tipo RESULT =null;
		LStruct LStruct = (LStruct)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-1)).value;
		 RESULT = sem.tipo_struct(LStruct); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("tipo_struct",13, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lista_struct ::= lista_struct COMA campo 
            {
              LStruct RESULT =null;
		LStruct LStruct = (LStruct)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-2)).value;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = sem.lista_struct(LStruct, campo); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("lista_struct",14, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lista_struct ::= campo 
            {
              LStruct RESULT =null;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = sem.info_struct(campo); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("lista_struct",14, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // campo ::= tipo IDENTIFICADOR 
            {
              Campo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = (Campo) sem.campo(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("campo",15, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instrucciones_opt ::= lista_instrucciones 
            {
              InstrOpt RESULT =null;
		LInstr lInstr = (LInstr)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = sem.si_inst(lInstr); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("instrucciones_opt",16, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instrucciones_opt ::= 
            {
              InstrOpt RESULT =null;
		 RESULT = sem.no_inst(); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("instrucciones_opt",16, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lista_instrucciones ::= lista_instrucciones PUNTO_Y_COMA instruccion 
            {
              LInstr RESULT =null;
		LInstr lInstr = (LInstr)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-2)).value;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = sem.muchas_instr(lInstr, instr); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",17, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lista_instrucciones ::= instruccion 
            {
              LInstr RESULT =null;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = sem.una_instr(instr); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",17, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion ::= instruccion_eval 
            {
              Instr RESULT =null;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = instr; 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("instruccion",18, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= instruccion_if 
            {
              Instr RESULT =null;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = instr; 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("instruccion",18, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= instruccion_while 
            {
              Instr RESULT =null;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = instr; 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("instruccion",18, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= instruccion_read 
            {
              Instr RESULT =null;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = instr; 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("instruccion",18, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= instruccion_write 
            {
              Instr RESULT =null;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = instr; 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("instruccion",18, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= instruccion_nl 
            {
              Instr RESULT =null;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = instr; 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("instruccion",18, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= instruccion_reserva 
            {
              Instr RESULT =null;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = instr; 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("instruccion",18, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= instruccion_libera 
            {
              Instr RESULT =null;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = instr; 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("instruccion",18, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= instruccion_call 
            {
              Instr RESULT =null;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = instr; 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("instruccion",18, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion ::= instruccion_compuesta 
            {
              Instr RESULT =null;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = instr; 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("instruccion",18, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccion_eval ::= EVAL E0 
            {
              Instr RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = sem.instr_eval(exp); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("instruccion_eval",19, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruccion_if ::= IF E0 programa 
            {
              Instr RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-1)).value;
		Prog prog = (Prog)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = sem.instr_if(exp, prog); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("instruccion_if",20, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instruccion_if ::= IF E0 programa ELSE programa 
            {
              Instr RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-3)).value;
		Prog prog1 = (Prog)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-2)).value;
		Prog prog2 = (Prog)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = sem.instr_else(exp, prog1, prog2); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("instruccion_if",20, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instruccion_while ::= WHILE E0 programa 
            {
              Instr RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-1)).value;
		Prog prog = (Prog)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = sem.instr_wh(exp, prog); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("instruccion_while",21, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instruccion_read ::= READ E0 
            {
              Instr RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = sem.instr_rd(exp); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("instruccion_read",22, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instruccion_write ::= WRITE E0 
            {
              Instr RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = sem.instr_wr(exp); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("instruccion_write",23, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instruccion_nl ::= NL 
            {
              Instr RESULT =null;
		 RESULT = sem.instr_nl(); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("instruccion_nl",24, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instruccion_reserva ::= NEW E0 
            {
              Instr RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = sem.instr_new(exp); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("instruccion_reserva",25, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instruccion_libera ::= DELETE E0 
            {
              Instr RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = sem.instr_del(exp); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("instruccion_libera",26, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instruccion_call ::= CALL IDENTIFICADOR PARENTESIS_APERTURA parametros_reales PARENTESIS_CIERRE 
            {
              Instr RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-3)).value;
		ParamR paramR = (ParamR)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-1)).value;
		 RESULT = (Instr) sem.instr_call(id.str(), paramR).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("instruccion_call",27, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parametros_reales ::= lista_parametros_reales 
            {
              ParamR RESULT =null;
		LParamR lParamR = (LParamR)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = sem.si_param_re(lParamR); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("parametros_reales",29, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parametros_reales ::= 
            {
              ParamR RESULT =null;
		 RESULT = sem.no_param_re(); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("parametros_reales",29, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // lista_parametros_reales ::= lista_parametros_reales COMA E0 
            {
              LParamR RESULT =null;
		LParamR lParamR = (LParamR)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-2)).value;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = sem.muchos_param_re(lParamR, exp); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("lista_parametros_reales",30, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // lista_parametros_reales ::= E0 
            {
              LParamR RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = sem.un_param_re(exp); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("lista_parametros_reales",30, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // instruccion_compuesta ::= programa 
            {
              Instr RESULT =null;
		Prog prog = (Prog)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = sem.instr_comp(prog); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("instruccion_compuesta",28, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E0 ::= E1 ASIG E0 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-2)).value;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = (Exp) sem.asig(exp1, exp2).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("E0",31, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E0 ::= E1 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = exp; 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("E0",31, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E1 ::= E1 op_relacional E2 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-2)).value;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = (Exp) sem.op_rel(op.str(), exp1, exp2).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("E1",32, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E1 ::= E2 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = exp; 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("E1",32, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E2 ::= E2 SUMA E3 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-2)).value;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = (Exp) sem.suma(exp1, exp2).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("E2",33, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E2 ::= E3 RESTA E3 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-2)).value;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = (Exp) sem.resta(exp1, exp2).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("E2",33, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E2 ::= E3 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = exp; 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("E2",33, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E3 ::= E4 AND E3 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-2)).value;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = (Exp) sem.and(exp1, exp2).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("E3",34, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E3 ::= E4 OR E4 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-2)).value;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = (Exp) sem.or(exp1, exp2).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("E3",34, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E3 ::= E4 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = exp; 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("E3",34, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E4 ::= E4 op_nivel4 E5 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-2)).value;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = (Exp) sem.op_mul(op.str(), exp1, exp2).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("E4",35, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E4 ::= E5 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = exp; 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("E4",35, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E5 ::= op_nivel5 E5 
            {
              Exp RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-1)).value;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = (Exp) sem.op_inv(op.str(), exp).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("E5",36, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E5 ::= E6 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = exp; 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("E5",36, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E6 ::= E6 CORCHETE_APERTURA E0 CORCHETE_CIERRE 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-3)).value;
		StringLocalizado cap = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-2)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-1)).value;
		 RESULT = (Exp) sem.index(exp1, exp2).ponFila(cap.fila()).ponCol(cap.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("E6",37, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E6 ::= E6 PUNTO IDENTIFICADOR 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = (Exp) sem.reg(exp, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("E6",37, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E6 ::= E6 PUNTERO 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-1)).value;
		StringLocalizado pun = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = (Exp) sem.indir(exp).ponFila(pun.fila()).ponCol(pun.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("E6",37, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E6 ::= E7 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = exp; 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("E6",37, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E7 ::= PARENTESIS_APERTURA E0 PARENTESIS_CIERRE 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.elementAt(CUP$ASTS_A$top-1)).value;
		 RESULT = exp; 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("E7",38, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E7 ::= opnd 
            {
              Exp RESULT =null;
		Exp op = (Exp)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = op; 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("E7",38, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // op_relacional ::= MAYOR 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = new StringLocalizado(">", op.fila(), op.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("op_relacional",40, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // op_relacional ::= MAYOR_O_IGUAL 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = new StringLocalizado(">=", op.fila(), op.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("op_relacional",40, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // op_relacional ::= MENOR 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = new StringLocalizado("<", op.fila(), op.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("op_relacional",40, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // op_relacional ::= MENOR_O_IGUAL 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = new StringLocalizado("<=", op.fila(), op.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("op_relacional",40, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // op_relacional ::= IGUALDAD 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = new StringLocalizado("==", op.fila(), op.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("op_relacional",40, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // op_relacional ::= DISTINTO 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = new StringLocalizado("!=", op.fila(), op.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("op_relacional",40, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // op_nivel4 ::= MULTIPLICACION 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = new StringLocalizado("*", op.fila(), op.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("op_nivel4",41, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // op_nivel4 ::= DIVISION 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = new StringLocalizado("/", op.fila(), op.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("op_nivel4",41, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // op_nivel4 ::= MODULO 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = new StringLocalizado("%", op.fila(), op.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("op_nivel4",41, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // op_nivel5 ::= RESTA 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = new StringLocalizado("-", op.fila(), op.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("op_nivel5",42, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // op_nivel5 ::= NOT 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = new StringLocalizado("not", op.fila(), op.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("op_nivel5",42, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // opnd ::= LITERAL_ENTERO 
            {
              Exp RESULT =null;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = (Exp) sem.literal_ent(num.str()).ponFila(num.fila()).ponCol(num.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("opnd",39, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // opnd ::= LITERAL_REAL 
            {
              Exp RESULT =null;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = (Exp) sem.literal_real(num.str()).ponFila(num.fila()).ponCol(num.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("opnd",39, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // opnd ::= TRUE 
            {
              Exp RESULT =null;
		StringLocalizado tr = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = (Exp)sem.true_().ponFila(tr.fila()).ponCol(tr.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("opnd",39, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // opnd ::= FALSE 
            {
              Exp RESULT =null;
		StringLocalizado fl = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = (Exp)sem.false_().ponFila(fl.fila()).ponCol(fl.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("opnd",39, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // opnd ::= LITERAL_CADENA 
            {
              Exp RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = (Exp) sem.literal_cadena(id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("opnd",39, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // opnd ::= IDENTIFICADOR 
            {
              Exp RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = (Exp) sem.id(id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("opnd",39, RESULT);
            }
          return CUP$ASTS_A$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // opnd ::= NULL 
            {
              Exp RESULT =null;
		StringLocalizado nul = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ASTS_A$stack.peek()).value;
		 RESULT = (Exp)sem.nulo().ponFila(nul.fila()).ponCol(nul.col()); 
              CUP$ASTS_A$result = parser.getSymbolFactory().newSymbol("opnd",39, RESULT);
            }
          return CUP$ASTS_A$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ASTS_A$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ASTS_A$do_action(
    int                        CUP$ASTS_A$act_num,
    java_cup.runtime.lr_parser CUP$ASTS_A$parser,
    java.util.Stack            CUP$ASTS_A$stack,
    int                        CUP$ASTS_A$top)
    throws java.lang.Exception
    {
              return CUP$ASTS_A$do_action_part00000000(
                               CUP$ASTS_A$act_num,
                               CUP$ASTS_A$parser,
                               CUP$ASTS_A$stack,
                               CUP$ASTS_A$top);
    }
}

}
