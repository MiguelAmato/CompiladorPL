a
{
type ^tNodo tArbol;     
type struct{ 
       string nombre, 
       tArbol izq,
       tArbol der
     } tNodo;
type struct { 
       string [50] nombres,
       int cont
      } tListaNombres;

tListaNombres nombres;   ## Aquí se guardarán los nombres leídos (max. 50)
tArbol arbol;            ## Aquí se construirá un árbol de búsqueda que contendrá
                         ## los nombres leídos, sin duplicados  

   ## Lee los nombres a ordenar (max. 50 nombres)
proc lee_nombres(tListaNombres & nombres) { 
  int i
  &&
      write "Introduce el número de nombres a ordenar (max 50): "; 
      nl;
      read nombres.cont;
      while (nombres.cont < 0) or (nombres.cont > 50) { 
         write "Introduce el número de nombres a ordenar (max 50): "; nl;
         read nombres.cont
      };
      @ i=0;
      write "Introduce un nombre en cada línea: "; nl;
      while i < nombres.cont {
        read nombres.nombres[i];
        @ i = i + 1
      }
 };  ## fin del procedimiento lee_nombres

  
  ## Construye un árbol de búsqueda sin duplicados con los nombres leídos
  ## Hace un uso global de las variables 'nombres' y 'arbol' declaradas en
  ## el programa principal
proc construye_arbol() {
  int i; ## para iterar sobre la lista de nombres

     ## Inserta el nombre actual en el árbol de búsqueda que recibe como parámetro.
     ## Hace un uso global de la variable 'nombres' declarado en el programa principal,
     ## y en del contador 'i' declarado en el subprograma contenedor 'construye_arbol'
  proc inserta_nombre(tArbol & arbol) { 
    if arbol == null { 
	 new arbol;
        @ arbol^.nombre = nombres.nombres[i];
        @ arbol^.izq = arbol^.der = null
    } 		 
    else { 
       tArbol padre;  ## apuntará al nodo padre del nuevo nodo a insertar
       tArbol act;    ## para recorrer la rama al final de la cuál debe realizarse
                      ## la inserción. 
       bool fin       ## para controlar el final del recorrido de la rama
       &&
        @ fin = false;
        @ padre = null;
        @ act = arbol;		 
	  while not fin {
	     @ padre = act;
	     if act^.nombre < nombres.nombres[i] { ##insertar en el hijo derecho
	        @ act = act^.der
            } 
	     else { 
              if act^.nombre > nombres.nombres[i] { ##insertar en el hijo izquierdo
                 @ act = act^.izq
              }
            };
            if act == null { ## se ha alcanzado el punto de inserción
                 @ fin = true
            }
            else { 
               if act^.nombre == nombres.nombres[i] {  ## el nombre está duplicado
                  @ fin = true
            }
          }; ## fin del while
         
   
         if act == null { ## se ha alcanzado un punto de inserción
                          ## hay que insertar un nuevo nodo 
             if padre^.nombre < nombres.nombres[i] { ## insertar como hijo izquierdo
                new padre^.der;
                @ padre^.der^.nombre = nombres.nombres[i];
                @ padre^.der^.izq = padre^.der^.der = null
             } 
             
            else {                                 ## insertar como hijo derecho 
                new padre^.izq;
                @ padre^.izq^.nombre = nombres.nombres[i];
                @ padre^.izq^.izq= padre^.izq^.der = null
            }
          }
        }
       }
      } ## del procedimiento anidado inserta_nombre 
   &&
      ## cuerpo del procedimiento construye_arbol  
     @ arbol = null;
     @ i=0;
     while i < nombres.cont { 
       call inserta_nombre(arbol);
       @ i = i + 1
     }
  };  ## del procedimiento construye_arbol 
  
    ## Escribe los nombres almacenados en el árbol de búsqueda, recorriendo
    ## dicho árbol en inorden.
    ## Por tanto, los nombres se listan ordenados alfabéticamente,
    ## y sin duplicados
  proc escribe_nombres(tArbol arbol) { 
      if arbol != null {
	  call escribe_nombres(arbol^.izq);
	  write arbol^.nombre; nl;
	  call escribe_nombres(arbol^.der)
      }
  } ## del procedimiento escribe_nombres
 &&         
      ## Programa principal

    call lee_nombres(nombres);
    call construye_arbol();
    write "Listado de nombres ordenado"; nl;
    write "---------------------------"; nl;
    call escribe_nombres(arbol)

} ## fin programa
