/* Generated By:JavaCC: Do not edit this line. AnalizadorSintacticoTiny.java */
package asint;

public class AnalizadorSintacticoTiny implements AnalizadorSintacticoTinyConstants {
    protected void newToken(Token t) {}

  final public void analiza() throws ParseException {
    trace_call("analiza");
    try {
      programa();
      jj_consume_token(0);
    } finally {
      trace_return("analiza");
    }
  }

  final public void programa() throws ParseException {
    trace_call("programa");
    try {
      bloque();
    } finally {
      trace_return("programa");
    }
  }

  final public void bloque() throws ParseException {
    trace_call("bloque");
    try {
      jj_consume_token(41);
      declaraciones_opt();
      instrucciones_opt();
      jj_consume_token(42);
    } finally {
      trace_return("bloque");
    }
  }

  final public void declaraciones_opt() throws ParseException {
    trace_call("declaraciones_opt");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ent:
      case real:
      case bool:
      case string:
      case proc:
      case struct:
      case type:
      case identificador:
      case 50:
        seccion_declaraciones();
        break;
      default:
        jj_la1[0] = jj_gen;

      }
    } finally {
      trace_return("declaraciones_opt");
    }
  }

  final public void seccion_declaraciones() throws ParseException {
    trace_call("seccion_declaraciones");
    try {
      lista_declaraciones();
      jj_consume_token(cambioSec);
    } finally {
      trace_return("seccion_declaraciones");
    }
  }

  final public void lista_declaraciones() throws ParseException {
    trace_call("lista_declaraciones");
    try {
      declaracion();
      lista_declaraciones_re();
    } finally {
      trace_return("lista_declaraciones");
    }
  }

  final public void lista_declaraciones_re() throws ParseException {
    trace_call("lista_declaraciones_re");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 43:
        jj_consume_token(43);
        declaracion();
        lista_declaraciones_re();
        break;
      default:
        jj_la1[1] = jj_gen;

      }
    } finally {
      trace_return("lista_declaraciones_re");
    }
  }

  final public void declaracion() throws ParseException {
    trace_call("declaracion");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ent:
      case real:
      case bool:
      case string:
      case struct:
      case identificador:
      case 50:
        declaracion_variable();
        break;
      case type:
        declaracion_tipo();
        break;
      case proc:
        declaracion_proc();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("declaracion");
    }
  }

  final public void declaracion_variable() throws ParseException {
    trace_call("declaracion_variable");
    try {
      tipo();
      jj_consume_token(identificador);
    } finally {
      trace_return("declaracion_variable");
    }
  }

  final public void declaracion_tipo() throws ParseException {
    trace_call("declaracion_tipo");
    try {
      jj_consume_token(type);
      tipo();
      jj_consume_token(identificador);
    } finally {
      trace_return("declaracion_tipo");
    }
  }

  final public void declaracion_proc() throws ParseException {
    trace_call("declaracion_proc");
    try {
      cabecera_proc();
      bloque();
    } finally {
      trace_return("declaracion_proc");
    }
  }

  final public void cabecera_proc() throws ParseException {
    trace_call("cabecera_proc");
    try {
      jj_consume_token(proc);
      jj_consume_token(identificador);
      jj_consume_token(44);
      parametros_formales();
      jj_consume_token(45);
    } finally {
      trace_return("cabecera_proc");
    }
  }

  final public void parametros_formales() throws ParseException {
    trace_call("parametros_formales");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ent:
      case real:
      case bool:
      case string:
      case struct:
      case identificador:
      case 50:
        lista_parametros();
        break;
      default:
        jj_la1[3] = jj_gen;

      }
    } finally {
      trace_return("parametros_formales");
    }
  }

  final public void lista_parametros() throws ParseException {
    trace_call("lista_parametros");
    try {
      parametro();
      lista_parametros_re();
    } finally {
      trace_return("lista_parametros");
    }
  }

  final public void lista_parametros_re() throws ParseException {
    trace_call("lista_parametros_re");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 46:
        jj_consume_token(46);
        parametro();
        lista_parametros_re();
        break;
      default:
        jj_la1[4] = jj_gen;

      }
    } finally {
      trace_return("lista_parametros_re");
    }
  }

  final public void parametro() throws ParseException {
    trace_call("parametro");
    try {
      tipo();
      parametro_re();
    } finally {
      trace_return("parametro");
    }
  }

  final public void parametro_re() throws ParseException {
    trace_call("parametro_re");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case identificador:
        jj_consume_token(identificador);
        break;
      case 47:
        jj_consume_token(47);
        jj_consume_token(identificador);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("parametro_re");
    }
  }

  final public void tipo() throws ParseException {
    trace_call("tipo");
    try {
      tipo1();
      tipo_re();
    } finally {
      trace_return("tipo");
    }
  }

  final public void tipo_re() throws ParseException {
    trace_call("tipo_re");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 48:
        jj_consume_token(48);
        jj_consume_token(literal_entero);
        jj_consume_token(49);
        tipo_re();
        break;
      default:
        jj_la1[6] = jj_gen;

      }
    } finally {
      trace_return("tipo_re");
    }
  }

  final public void tipo1() throws ParseException {
    trace_call("tipo1");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        jj_consume_token(50);
        tipo1();
        break;
      case ent:
      case real:
      case bool:
      case string:
      case struct:
      case identificador:
        tipo2();
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("tipo1");
    }
  }

  final public void tipo2() throws ParseException {
    trace_call("tipo2");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ent:
        jj_consume_token(ent);
        break;
      case real:
        jj_consume_token(real);
        break;
      case bool:
        jj_consume_token(bool);
        break;
      case string:
        jj_consume_token(string);
        break;
      case identificador:
        jj_consume_token(identificador);
        break;
      case struct:
        tipo_struct();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("tipo2");
    }
  }

  final public void tipo_struct() throws ParseException {
    trace_call("tipo_struct");
    try {
      jj_consume_token(struct);
      jj_consume_token(41);
      lista_struct();
      jj_consume_token(42);
    } finally {
      trace_return("tipo_struct");
    }
  }

  final public void lista_struct() throws ParseException {
    trace_call("lista_struct");
    try {
      campo();
      lista_struct_re();
    } finally {
      trace_return("lista_struct");
    }
  }

  final public void lista_struct_re() throws ParseException {
    trace_call("lista_struct_re");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 46:
        jj_consume_token(46);
        campo();
        lista_struct_re();
        break;
      default:
        jj_la1[9] = jj_gen;

      }
    } finally {
      trace_return("lista_struct_re");
    }
  }

  final public void campo() throws ParseException {
    trace_call("campo");
    try {
      tipo();
      jj_consume_token(identificador);
    } finally {
      trace_return("campo");
    }
  }

  final public void instrucciones_opt() throws ParseException {
    trace_call("instrucciones_opt");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case If:
      case While:
      case New:
      case Delete:
      case read:
      case write:
      case nl:
      case call:
      case 41:
      case 51:
        lista_instrucciones();
        break;
      default:
        jj_la1[10] = jj_gen;

      }
    } finally {
      trace_return("instrucciones_opt");
    }
  }

  final public void lista_instrucciones() throws ParseException {
    trace_call("lista_instrucciones");
    try {
      instruccion();
      lista_instrucciones_re();
    } finally {
      trace_return("lista_instrucciones");
    }
  }

  final public void lista_instrucciones_re() throws ParseException {
    trace_call("lista_instrucciones_re");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 43:
        jj_consume_token(43);
        instruccion();
        lista_instrucciones_re();
        break;
      default:
        jj_la1[11] = jj_gen;

      }
    } finally {
      trace_return("lista_instrucciones_re");
    }
  }

  final public void instruccion() throws ParseException {
    trace_call("instruccion");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 51:
        instruccion_eval();
        break;
      case If:
        instruccion_if();
        break;
      case While:
        instruccion_while();
        break;
      case read:
        instruccion_read();
        break;
      case write:
        instruccion_write();
        break;
      case nl:
        instruccion_nl();
        break;
      case New:
        instruccion_reserva();
        break;
      case Delete:
        instruccion_libera();
        break;
      case call:
        instruccion_call();
        break;
      case 41:
        instruccion_compuesta();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("instruccion");
    }
  }

  final public void instruccion_eval() throws ParseException {
    trace_call("instruccion_eval");
    try {
      jj_consume_token(51);
      E0();
    } finally {
      trace_return("instruccion_eval");
    }
  }

  final public void instruccion_if() throws ParseException {
    trace_call("instruccion_if");
    try {
      jj_consume_token(If);
      E0();
      bloque();
      instruccion_if_re();
    } finally {
      trace_return("instruccion_if");
    }
  }

  final public void instruccion_if_re() throws ParseException {
    trace_call("instruccion_if_re");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Else:
        jj_consume_token(Else);
        bloque();
        break;
      default:
        jj_la1[13] = jj_gen;

      }
    } finally {
      trace_return("instruccion_if_re");
    }
  }

  final public void instruccion_while() throws ParseException {
    trace_call("instruccion_while");
    try {
      jj_consume_token(While);
      E0();
      bloque();
    } finally {
      trace_return("instruccion_while");
    }
  }

  final public void instruccion_read() throws ParseException {
    trace_call("instruccion_read");
    try {
      jj_consume_token(read);
      E0();
    } finally {
      trace_return("instruccion_read");
    }
  }

  final public void instruccion_write() throws ParseException {
    trace_call("instruccion_write");
    try {
      jj_consume_token(write);
      E0();
    } finally {
      trace_return("instruccion_write");
    }
  }

  final public void instruccion_nl() throws ParseException {
    trace_call("instruccion_nl");
    try {
      jj_consume_token(nl);
    } finally {
      trace_return("instruccion_nl");
    }
  }

  final public void instruccion_reserva() throws ParseException {
    trace_call("instruccion_reserva");
    try {
      jj_consume_token(New);
      E0();
    } finally {
      trace_return("instruccion_reserva");
    }
  }

  final public void instruccion_libera() throws ParseException {
    trace_call("instruccion_libera");
    try {
      jj_consume_token(Delete);
      E0();
    } finally {
      trace_return("instruccion_libera");
    }
  }

  final public void instruccion_call() throws ParseException {
    trace_call("instruccion_call");
    try {
      jj_consume_token(call);
      jj_consume_token(identificador);
      jj_consume_token(44);
      parametros_reales();
      jj_consume_token(45);
    } finally {
      trace_return("instruccion_call");
    }
  }

  final public void parametros_reales() throws ParseException {
    trace_call("parametros_reales");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case not:
      case nulo:
      case falso:
      case verdadero:
      case identificador:
      case literal_entero:
      case literal_cadena:
      case literal_real:
      case 44:
      case 54:
        lista_parametros_reales();
        break;
      default:
        jj_la1[14] = jj_gen;

      }
    } finally {
      trace_return("parametros_reales");
    }
  }

  final public void lista_parametros_reales() throws ParseException {
    trace_call("lista_parametros_reales");
    try {
      E0();
      lista_parametros_reales_re();
    } finally {
      trace_return("lista_parametros_reales");
    }
  }

  final public void lista_parametros_reales_re() throws ParseException {
    trace_call("lista_parametros_reales_re");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 46:
        jj_consume_token(46);
        E0();
        lista_parametros_reales_re();
        break;
      default:
        jj_la1[15] = jj_gen;

      }
    } finally {
      trace_return("lista_parametros_reales_re");
    }
  }

  final public void instruccion_compuesta() throws ParseException {
    trace_call("instruccion_compuesta");
    try {
      bloque();
    } finally {
      trace_return("instruccion_compuesta");
    }
  }

  final public void E0() throws ParseException {
    trace_call("E0");
    try {
      E1();
      E0RE();
    } finally {
      trace_return("E0");
    }
  }

  final public void E0RE() throws ParseException {
    trace_call("E0RE");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
        jj_consume_token(52);
        E0();
        break;
      default:
        jj_la1[16] = jj_gen;

      }
    } finally {
      trace_return("E0RE");
    }
  }

  final public void E1() throws ParseException {
    trace_call("E1");
    try {
      E2();
      E1RE();
    } finally {
      trace_return("E1");
    }
  }

  final public void E1RE() throws ParseException {
    trace_call("E1RE");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case menorIgual:
      case mayorIgual:
      case igualdad:
      case distinto:
      case 55:
      case 56:
        op_relacional();
        E2();
        E1RE();
        break;
      default:
        jj_la1[17] = jj_gen;

      }
    } finally {
      trace_return("E1RE");
    }
  }

  final public void E2() throws ParseException {
    trace_call("E2");
    try {
      E3();
      E2RE();
      E2RE1();
    } finally {
      trace_return("E2");
    }
  }

  final public void E2RE1() throws ParseException {
    trace_call("E2RE1");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
        jj_consume_token(53);
        E3();
        E2RE1();
        break;
      default:
        jj_la1[18] = jj_gen;

      }
    } finally {
      trace_return("E2RE1");
    }
  }

  final public void E2RE() throws ParseException {
    trace_call("E2RE");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 54:
        jj_consume_token(54);
        E3();
        break;
      default:
        jj_la1[19] = jj_gen;

      }
    } finally {
      trace_return("E2RE");
    }
  }

  final public void E3() throws ParseException {
    trace_call("E3");
    try {
      E4();
      E3RE();
    } finally {
      trace_return("E3");
    }
  }

  final public void E3RE() throws ParseException {
    trace_call("E3RE");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case and:
        jj_consume_token(and);
        E3();
        break;
      case or:
        jj_consume_token(or);
        E4();
        break;
      default:
        jj_la1[20] = jj_gen;

      }
    } finally {
      trace_return("E3RE");
    }
  }

  final public void E4() throws ParseException {
    trace_call("E4");
    try {
      E5();
      E4RE();
    } finally {
      trace_return("E4");
    }
  }

  final public void E4RE() throws ParseException {
    trace_call("E4RE");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 57:
      case 58:
      case 59:
        op_nivel4();
        E5();
        E4RE();
        break;
      default:
        jj_la1[21] = jj_gen;

      }
    } finally {
      trace_return("E4RE");
    }
  }

  final public void E5() throws ParseException {
    trace_call("E5");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case not:
      case 54:
        op_nivel5();
        E5();
        break;
      case nulo:
      case falso:
      case verdadero:
      case identificador:
      case literal_entero:
      case literal_cadena:
      case literal_real:
      case 44:
        E6();
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("E5");
    }
  }

  final public void E6() throws ParseException {
    trace_call("E6");
    try {
      E7();
      E6RE();
    } finally {
      trace_return("E6");
    }
  }

  final public void E6RE() throws ParseException {
    trace_call("E6RE");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 48:
      case 50:
      case 60:
        op_nivel6();
        E6RE();
        break;
      default:
        jj_la1[23] = jj_gen;

      }
    } finally {
      trace_return("E6RE");
    }
  }

  final public void E7() throws ParseException {
    trace_call("E7");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 44:
        jj_consume_token(44);
        E0();
        jj_consume_token(45);
        break;
      case nulo:
      case falso:
      case verdadero:
      case identificador:
      case literal_entero:
      case literal_cadena:
      case literal_real:
        op_basico();
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("E7");
    }
  }

  final public void op_relacional() throws ParseException {
    trace_call("op_relacional");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 55:
        jj_consume_token(55);
        break;
      case mayorIgual:
        jj_consume_token(mayorIgual);
        break;
      case 56:
        jj_consume_token(56);
        break;
      case menorIgual:
        jj_consume_token(menorIgual);
        break;
      case igualdad:
        jj_consume_token(igualdad);
        break;
      case distinto:
        jj_consume_token(distinto);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("op_relacional");
    }
  }

  final public void op_nivel4() throws ParseException {
    trace_call("op_nivel4");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 57:
        jj_consume_token(57);
        break;
      case 58:
        jj_consume_token(58);
        break;
      case 59:
        jj_consume_token(59);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("op_nivel4");
    }
  }

  final public void op_nivel5() throws ParseException {
    trace_call("op_nivel5");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 54:
        jj_consume_token(54);
        break;
      case not:
        jj_consume_token(not);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("op_nivel5");
    }
  }

  final public void op_nivel6() throws ParseException {
    trace_call("op_nivel6");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 48:
        op_indexacion();
        break;
      case 60:
        op_registro();
        break;
      case 50:
        op_indireccion();
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("op_nivel6");
    }
  }

  final public void op_indexacion() throws ParseException {
    trace_call("op_indexacion");
    try {
      jj_consume_token(48);
      E0();
      jj_consume_token(49);
    } finally {
      trace_return("op_indexacion");
    }
  }

  final public void op_registro() throws ParseException {
    trace_call("op_registro");
    try {
      jj_consume_token(60);
      jj_consume_token(identificador);
    } finally {
      trace_return("op_registro");
    }
  }

  final public void op_indireccion() throws ParseException {
    trace_call("op_indireccion");
    try {
      jj_consume_token(50);
      op_indireccion_re();
    } finally {
      trace_return("op_indireccion");
    }
  }

  final public void op_indireccion_re() throws ParseException {
    trace_call("op_indireccion_re");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        op_indireccion();
        break;
      default:
        jj_la1[29] = jj_gen;

      }
    } finally {
      trace_return("op_indireccion_re");
    }
  }

  final public void op_basico() throws ParseException {
    trace_call("op_basico");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case literal_entero:
        jj_consume_token(literal_entero);
        break;
      case literal_real:
        jj_consume_token(literal_real);
        break;
      case verdadero:
        jj_consume_token(verdadero);
        break;
      case falso:
        jj_consume_token(falso);
        break;
      case literal_cadena:
        jj_consume_token(literal_cadena);
        break;
      case identificador:
        jj_consume_token(identificador);
        break;
      case nulo:
        jj_consume_token(nulo);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("op_basico");
    }
  }

  /** Generated Token Manager. */
  public AnalizadorSintacticoTinyTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x50447800,0x0,0x50447800,0x40407800,0x0,0x40000000,0x0,0x40407800,0x40407800,0x0,0x2fa80000,0x0,0x2fa80000,0x100000,0xc0038400,0x0,0x0,0x0,0x0,0x0,0x300,0x0,0xc0038400,0x0,0xc0038000,0x0,0x0,0x400,0x0,0x0,0xc0038000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x40000,0x800,0x40000,0x40000,0x4000,0x8000,0x10000,0x40000,0x0,0x4000,0x80200,0x800,0x80200,0x0,0x401003,0x4000,0x100000,0x180003c,0x200000,0x400000,0x0,0xe000000,0x401003,0x10050000,0x1003,0x180003c,0xe000000,0x400000,0x10050000,0x40000,0x3,};
   }

  /** Constructor with InputStream. */
  public AnalizadorSintacticoTiny(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AnalizadorSintacticoTiny(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalizadorSintacticoTinyTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AnalizadorSintacticoTiny(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorSintacticoTinyTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AnalizadorSintacticoTiny(AnalizadorSintacticoTinyTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalizadorSintacticoTinyTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[61];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 31; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 61; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  protected void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
