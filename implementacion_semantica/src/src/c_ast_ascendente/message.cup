package model.sintaxis;

import exceptions.SintaxisException;
import model.sintaxis.SintaxisAbstracta.Prog;
import model.sintaxis.SintaxisAbstracta.Bloque;
import model.sintaxis.SintaxisAbstracta.Decs_opt;
import model.sintaxis.SintaxisAbstracta.Decs;
import model.sintaxis.SintaxisAbstracta.Dec;
import model.sintaxis.SintaxisAbstracta.Tipo;
import model.sintaxis.SintaxisAbstracta.Campos;
import model.sintaxis.SintaxisAbstracta.Campo;
import model.sintaxis.SintaxisAbstracta.LParam_opt;
import model.sintaxis.SintaxisAbstracta.LParam;
import model.sintaxis.SintaxisAbstracta.Param;
import model.sintaxis.SintaxisAbstracta.Instrs_opt;
import model.sintaxis.SintaxisAbstracta.Instrs;
import model.sintaxis.SintaxisAbstracta.Instr;
import model.sintaxis.SintaxisAbstracta.Exps_opt;
import model.sintaxis.SintaxisAbstracta.Exps;
import model.sintaxis.SintaxisAbstracta.Exp;
import model.lexico.AnalizadorLexico;
import model.lexico.UnidadLexica;
import model.lexico.UnidadLexica.StringLocalizado;

import java_cup.runtime.*;

scan with {:
  return getScanner().next_token();
:};

parser code {:
  @Override
  public void debug_message(String msg) {}
  @Override
  public void debug_shift(Symbol token) {}
  @Override
  public void syntax_error(Symbol unidadLexica) {
    throw new SintaxisException((UnidadLexica)unidadLexica);
  }
:};

init with {:
   AnalizadorLexico alex = (AnalizadorLexico)getScanner();
:};

action code {:
  ClaseSemantica sem = new ClaseSemantica();
:}


terminal      ENTERO, REAL, BOOLEAN, STRING, PYC, PAP, PCIERRE, LLAVE_APERTURA, LLAVE_CIERRE, COR_CIERRE,
              COMA, ACCESO, EVALUA, CAMBIO_SEC, PROC, IF, ELSE, WHILE, STRUCT, NEW, DELETE, READ, WRITE, NL,
              TYPE, CALL, REFERENCIA;
terminal StringLocalizado   IDENTIFICADOR, LITERAL_ENTERO, LITERAL_REAL, LITERAL_TRUE, LITERAL_FALSE, LITERAL_STRING,
                            NULL, COR_APERTURA, PUNTERO, SUMA, RESTA, POR, DIV, MODULO, AND, OR, NOT, MENOR, MAYOR,
                            MENOR_IGUAL, MAYOR_IGUAL, IGUAL, DIFERENTE, ASIGNACION;


non terminal Prog programa;
non terminal Bloque bloque;
non terminal Decs_opt declaraciones_opt;
non terminal Decs declaraciones;
non terminal Dec declaracion, dec_tipo, dec_variable, dec_procedimiento;
non terminal Tipo tipo0, tipo1, tipo2, registro;
non terminal Campos campos;
non terminal Campo campo;
non terminal LParam_opt lista_parametros_opt;
non terminal LParam lista_parametros;
non terminal Param parametro;
non terminal Instrs_opt instrucciones_opt;
non terminal Instrs instrucciones;
non terminal Instr instruccion, instruccion_eval, instruccion_if, instruccion_while, instruccion_read, instruccion_write,
                   instruccion_nl, instruccion_new, instruccion_delete, instruccion_call, instruccion_compuesta;
non terminal Exps_opt lista_expresiones_opt;
non terminal Exps lista_expresiones;
non terminal Exp E0, E1, E2, E3, E4, E5, E6, E7, operando;
non terminal StringLocalizado OP1, OP4, OP5;


programa ::= bloque: bq
   {: RESULT = sem.prog(bq); :};
bloque ::= LLAVE_APERTURA declaraciones_opt: decs instrucciones_opt: instrs LLAVE_CIERRE
   {: RESULT = sem.bloque(decs, instrs); :};

declaraciones_opt ::= declaraciones: decs CAMBIO_SEC
   {: RESULT = sem.si_decs(decs); :};
declaraciones_opt ::=
   {: RESULT = sem.no_decs(); :};
declaraciones ::= declaraciones: decs PYC declaracion: dec
   {: RESULT = sem.l_decs(decs, dec); :};
declaraciones ::= declaracion: dec
   {: RESULT = sem.una_dec(dec); :};
declaracion ::= dec_tipo: dec
   {: RESULT = dec; :};
declaracion ::= dec_variable: dec
   {: RESULT = dec; :};
declaracion ::= dec_procedimiento: dec
   {: RESULT = dec; :};

dec_tipo ::= TYPE tipo0: tipo IDENTIFICADOR: id
   {: RESULT = (Dec)sem.t_dec(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); :};

dec_variable ::= tipo0: tipo IDENTIFICADOR: id
   {: RESULT = (Dec)sem.v_dec(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); :};
tipo0 ::= tipo0: tipo COR_APERTURA LITERAL_ENTERO: cap COR_CIERRE
   {: RESULT = (Tipo)sem.a_tipo(tipo, cap.str()).ponFila(cap.fila()).ponCol(cap.col()); :};
tipo0 ::= tipo1: tipo
   {: RESULT = tipo; :};
tipo1 ::= tipo2: tipo
   {: RESULT = tipo; :};
tipo1 ::= PUNTERO tipo1: tipo
   {: RESULT = sem.p_tipo(tipo); :};
tipo2 ::= ENTERO
   {: RESULT = sem.in_tipo(); :};
tipo2 ::= REAL
   {: RESULT = sem.r_tipo(); :};
tipo2 ::= BOOLEAN
   {: RESULT = sem.b_tipo(); :};
tipo2 ::= STRING
   {: RESULT = sem.string_tipo(); :};
tipo2 ::= IDENTIFICADOR: id
   {: RESULT = (Tipo)sem.id_tipo(id.str()).ponFila(id.fila()).ponCol(id.col()); :};
tipo2 ::= registro: reg
    {: RESULT = reg; :};
registro ::= STRUCT LLAVE_APERTURA campos: camps LLAVE_CIERRE
   {: RESULT = sem.struct_tipo(camps); :};
campos ::= campos: camps COMA campo: cam
   {: RESULT = sem.l_campos(camps, cam); :};
campos ::= campo: cam
   {: RESULT = sem.un_campo(cam); :};
campo ::= tipo0: tipo IDENTIFICADOR: id
   {: RESULT = (Campo)sem.camp(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); :};

dec_procedimiento ::= PROC IDENTIFICADOR: id PAP lista_parametros_opt: params PCIERRE bloque: bq
   {: RESULT = (Dec)sem.p_dec(id.str(), params, bq).ponFila(id.fila()).ponCol(id.col()); :};
lista_parametros_opt ::= lista_parametros: params
   {: RESULT = sem.si_param(params); :};
lista_parametros_opt ::=
   {: RESULT = sem.no_param(); :};
lista_parametros ::= lista_parametros: params COMA parametro: param
   {: RESULT = sem.l_param(params, param); :};
lista_parametros ::= parametro: param
   {: RESULT = sem.un_param(param); :};
parametro ::= tipo0: tipo IDENTIFICADOR: id
   {: RESULT = (Param)sem.param_simple(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); :};
parametro ::= tipo0: tipo REFERENCIA IDENTIFICADOR: id
   {: RESULT = (Param)sem.param_ref(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); :};

instrucciones_opt ::= instrucciones: instrs
   {: RESULT = sem.si_instrs(instrs); :};
instrucciones_opt ::=
   {: RESULT = sem.no_instrs(); :};
instrucciones ::= instrucciones: instrs PYC instruccion: instr
   {: RESULT = sem.l_instrs(instrs, instr); :};
instrucciones ::= instruccion: instr
   {: RESULT = sem.una_instr(instr); :};
instruccion ::= instruccion_eval: instr
   {: RESULT = instr; :};
instruccion ::= instruccion_if: instr
   {: RESULT = instr; :};
instruccion ::= instruccion_while: instr
   {: RESULT = instr; :};
instruccion ::= instruccion_read: instr
   {: RESULT = instr; :};
instruccion ::= instruccion_write: instr
   {: RESULT = instr; :};
instruccion ::= instruccion_nl: instr
   {: RESULT = instr; :};
instruccion ::= instruccion_new: instr
   {: RESULT = instr; :};
instruccion ::= instruccion_delete : instr
   {: RESULT = instr; :};
instruccion ::= instruccion_call: instr
   {: RESULT = instr; :};
instruccion ::= instruccion_compuesta: instr
   {: RESULT = instr; :};
instruccion_eval ::= EVALUA E0: exp
   {: RESULT = sem.eva(exp); :};
instruccion_if ::= IF E0: exp bloque: bq
   {: RESULT = sem.if_instr(exp, bq); :};
instruccion_if ::= IF E0: exp bloque: bq1 ELSE bloque: bq2
   {: RESULT = sem.if_el(exp, bq1, bq2); :};
instruccion_while ::= WHILE E0: exp bloque: bq
   {: RESULT = sem.wh(exp, bq); :};
instruccion_read ::= READ E0: exp
   {: RESULT = sem.rd(exp); :};
instruccion_write ::= WRITE E0: exp
   {: RESULT = sem.wr(exp); :};
instruccion_nl ::= NL
   {: RESULT = sem.nl(); :};
instruccion_new ::= NEW E0: exp
   {: RESULT = sem.nw(exp); :};
instruccion_delete ::= DELETE E0: exp
   {: RESULT = sem.dl(exp); :};
instruccion_call ::= CALL IDENTIFICADOR: id PAP lista_expresiones_opt: exps PCIERRE
   {: RESULT = (Instr)sem.cl(id.str(), exps).ponFila(id.fila()).ponCol(id.col()); :};
instruccion_compuesta ::= bloque: bq
   {: RESULT = sem.bq_instr(bq); :};

lista_expresiones_opt ::= lista_expresiones: exps
   {: RESULT = sem.si_exps(exps); :};
lista_expresiones_opt ::=
   {: RESULT = sem.no_exps(); :};
lista_expresiones ::= lista_expresiones: exps COMA E0: exp
   {: RESULT = sem.l_exps(exps, exp); :};
lista_expresiones ::= E0: exp
   {: RESULT = sem.una_exp(exp); :};

E0 ::= E1: opnd0 ASIGNACION: op E0: opnd1
   {: RESULT = (Exp)sem.mkop("=", opnd0, opnd1).ponFila(op.fila()).ponCol(op.col()); :};
E0 ::= E1: exp
 {: RESULT = exp; :};
E1 ::= E1: opnd0 OP1: op E2: opnd1
   {: RESULT = (Exp)sem.mkop(op.str(), opnd0, opnd1).ponFila(op.fila()).ponCol(op.col()); :};
E1 ::= E2: exp
 {: RESULT = exp; :};
E2 ::= E2: opnd0 SUMA: op E3: opnd1
   {: RESULT = (Exp)sem.mkop("+", opnd0, opnd1).ponFila(op.fila()).ponCol(op.col()); :};
E2 ::= E3: opnd0 RESTA: op E3: opnd1
   {: RESULT = (Exp)sem.mkop("-", opnd0, opnd1).ponFila(op.fila()).ponCol(op.col()); :};
E2 ::= E3: exp
 {: RESULT = exp; :};
E3 ::= E4: opnd0 AND: op E3: opnd1
   {: RESULT = (Exp)sem.mkop("and", opnd0, opnd1).ponFila(op.fila()).ponCol(op.col()); :};
E3 ::= E4: opnd0 OR: op E4: opnd1
   {: RESULT = (Exp)sem.mkop("or", opnd0, opnd1).ponFila(op.fila()).ponCol(op.col()); :};
E3 ::= E4: exp
 {: RESULT = exp; :};
E4 ::= E4: opnd0 OP4: op E5: opnd1
   {: RESULT = (Exp)sem.mkop(op.str(), opnd0, opnd1).ponFila(op.fila()).ponCol(op.col());;:};
E4 ::= E5: exp
 {: RESULT = exp; :};
E5 ::= OP5: op E5: opnd
   {: RESULT = (Exp)sem.mkop_pre(op.str(), opnd).ponFila(op.fila()).ponCol(op.col()); :};
E5 ::= E6: exp
 {: RESULT = exp; :};
E6 ::= E6: opnd COR_APERTURA: cAp E0: pos COR_CIERRE
   {: RESULT = (Exp)sem.indexacion(opnd, pos).ponFila(cAp.fila()).ponCol(cAp.col()); :};
E6 ::= E6: opnd ACCESO IDENTIFICADOR: acceso
   {: RESULT = (Exp)sem.acceso(opnd, acceso.str()).ponFila(acceso.fila()).ponCol(acceso.col()); :};
E6 ::= E6: opnd PUNTERO: punt
   {: RESULT = (Exp)sem.indireccion(opnd).ponFila(punt.fila()).ponCol(punt.col()); :};
E6 ::= E7: exp
 {: RESULT = exp; :};
E7 ::= PAP E0: exp PCIERRE
 {: RESULT = exp; :};
E7 ::= operando: opnd
 {: RESULT = opnd; :};
OP1 ::= MAYOR: op
 {: RESULT = op; :};
OP1 ::= MENOR: op
 {: RESULT = op; :};
OP1 ::= MAYOR_IGUAL: op
 {: RESULT = op; :};
OP1 ::= MENOR_IGUAL: op
 {: RESULT = op; :};
OP1 ::= IGUAL: op
 {: RESULT = op; :};
OP1 ::= DIFERENTE: op
 {: RESULT = op; :};
OP4 ::= POR: op
 {: RESULT = op; :};
OP4 ::= DIV: op
 {: RESULT = op; :};
OP4 ::= MODULO: op
 {: RESULT = op; :};
OP5 ::= RESTA: op
 {: RESULT = op; :};
OP5 ::= NOT: op
 {: RESULT = new StringLocalizado("not", op.fila(), op.col()); :};
operando ::= LITERAL_REAL: re
   {: RESULT = (Exp)sem.real(re.str()).ponFila(re.fila()).ponCol(re.col()); :};
operando ::= LITERAL_ENTERO: ent
   {: RESULT = (Exp)sem.real(ent.str()).ponFila(ent.fila()).ponCol(ent.col()); :};
operando ::= LITERAL_TRUE: tr
   {: RESULT = (Exp)sem.true_exp().ponFila(tr.fila()).ponCol(tr.col()); :};
operando ::= LITERAL_FALSE: fl
   {: RESULT = (Exp)sem.false_exp().ponFila(fl.fila()).ponCol(fl.col()); :};
operando ::= LITERAL_STRING: st
   {: RESULT = (Exp)sem.string(st.str()).ponFila(st.fila()).ponCol(st.col()); :};
operando ::= IDENTIFICADOR: id
   {: RESULT = (Exp)sem.iden(id.str()).ponFila(id.fila()).ponCol(id.col()); :};
operando ::= NULL: nul
   {: RESULT = (Exp)sem.nulo().ponFila(nul.fila()).ponCol(nul.col()); :};