options  {
  STATIC=false;
  DEBUG_PARSER=true;
}  
PARSER_BEGIN(Asts)
package c_ast_descendente;

import asint.SintaxisAbstractaEval.*;
import asint.ClaseSemanticaEval;
import c_ast_ascendente.UnidadLexica.StringLocalizado;

public class Asts {
    private ClaseSemanticaEval sem = new ClaseSemanticaEval();
}

PARSER_END(Asts)
	TOKEN:{<#letra:["a"-"z","A"-"Z","_"]>}
	TOKEN:{<#digitoPositivo:["1"-"9"]>}
	TOKEN:{<#digito:<digitoPositivo>|"0">}
	TOKEN:{<#parteEntera:<digitoPositivo> (<digito>)* |"0">}
	TOKEN:{<#parteDecimal: (<digito>)* <digitoPositivo> | "0">}
	TOKEN:{<#decimal: "."<parteDecimal>>}
	TOKEN:{<#exponencial: ("e"|"E")(["+","-"])?<parteEntera>>}
	TOKEN:{<and:("a"|"A")("n"|"N")("d"|"D")>}
	TOKEN:{<or:("o"|"O")("r"|"R")>}
	TOKEN:{<not:("n"|"N")("o"|"O")("t"|"T")>}
	TOKEN:{<ent:("i"|"I")("n"|"N")("t"|"T")>}
	TOKEN:{<real:("r"|"R")("e"|"E")("a"|"A")("l"|"L")>}
	TOKEN:{<bool:("b"|"B")("o"|"O")("o"|"O")("l"|"L")>}
	TOKEN:{<string:("s"|"S")("t"|"T")("r"|"R")("i"|"I")("n"|"N")("g"|"G")>}
	TOKEN:{<nulo:("n"|"N")("u"|"U")("l"|"L")("l"|"L")>}
	TOKEN:{<falso:("f"|"F")("a"|"A")("l"|"L")("s"|"S")("e"|"E")>}
	TOKEN:{<verdadero:("t"|"T")("r"|"R")("u"|"U")("e"|"E")>}
	TOKEN:{<proc:("p"|"P")("r"|"R")("o"|"O")("c"|"C")>}
	TOKEN:{<If:("i"|"I")("f"|"F")>}
	TOKEN:{<Else:("e"|"E")("l"|"L")("s"|"S")("e"|"E")>}
	TOKEN:{<While:("w"|"W")("h"|"H")("i"|"I")("l"|"L")("e"|"E")>}
	TOKEN:{<struct:("s"|"S")("t"|"T")("r"|"R")("u"|"U")("c"|"C")("t"|"T")>}
	TOKEN:{<New:("n"|"N")("e"|"E")("w"|"W")>}
	TOKEN:{<Delete:("d"|"D")("e"|"E")("l"|"L")("e"|"E")("t"|"T")("e"|"E")>}
	TOKEN:{<read:("r"|"R")("e"|"E")("a"|"A")("d"|"D")>}
	TOKEN:{<write:("w"|"W")("r"|"R")("i"|"I")("t"|"T")("e"|"E")>}
	TOKEN:{<nl:("n"|"N")("l"|"L")>}
	TOKEN:{<type:("t"|"T")("y"|"Y")("p"|"P")("e"|"E")>}
	TOKEN:{<call:("c"|"C")("a"|"A")("l"|"L")("l"|"L")>}
	TOKEN:{<identificador:<letra>(<letra>|<digito>)*>}
	TOKEN:{<literal_entero:(["+","-"])?<parteEntera>>}
	TOKEN:{<literal_cadena:"\""(~["\""])*"\"">}
	TOKEN:{<literal_real:(<literal_entero><decimal>)|(<literal_entero><exponencial>)|(<literal_entero><decimal><exponencial>)>}
    TOKEN:{<menorIgual:"<=">}
    TOKEN:{<mayorIgual:">=">}
    TOKEN:{<igualdad:"==">}
    TOKEN:{<distinto:"!=">}
    TOKEN:{<cambioSec:"&&">}
	SKIP:{<["\t"," ","\r","\b","\n"]>}
	SKIP:{<"##"((~["\n"]) | "\'")*>}


	Prog analiza() : 
		{ Prog prog; } 
		{ 
			prog = programa() <EOF> 
			{return prog;}
		}
	Prog programa() : 
		{ Decs decOpt; InstrOpt instrOpt; } 
		{
			"{" decOpt = declaraciones_opt() instrOpt = instrucciones_opt() "}"
			{return sem.prog(decOpt, instrOpt);}
		}
	Decs declaraciones_opt() : 
		{ LDecs ldecs; } 
		{
			ldecs = lista_declaraciones() <cambioSec> 
			{return sem.si_decs(ldecs);}
			| 
			{return sem.no_decs();}
		}
	LDecs lista_declaraciones() : 
		{ Dec dec; LDecs ldecs; } 
		{
			dec = declaracion() ldecs = lista_declaraciones_re(sem.una_dec(dec))
			{ return ldecs; }
		}
	LDecs lista_declaraciones_re(LDecs ldech) : 
		{ Dec dec; LDecs ldecs; } 
		{
			";" dec = declaracion() ldecs = lista_declaraciones_re(sem.muchas_decs(ldech,dec))
			{return ldecs;} 
			| 
			{return ldech;}
		}
	Dec declaracion() : 
		{ Dec dec; } 
		{
			dec = declaracion_variable()
			{return dec;}
			| 
			dec = declaracion_tipo() 
			{return dec;}
			| 
			dec = declaracion_proc()
			{return dec;}
		}
	Dec declaracion_variable() : 
		{Tipo tipo; Token id;} 
		{
			tipo = tipo() id = <identificador>
			{ return (Dec)sem.dec_id(tipo, id.image).ponFila(id.beginLine).ponCol(id.beginColumn); } 	
		}
	Dec declaracion_tipo() : 
		{Tipo tipo; Token id;} 
		{
			<type> tipo = tipo() id = <identificador>
			{return (Dec)sem.dec_type(tipo, id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
		}
	Dec declaracion_proc() : 
		{Token id; ParamF paramf; Prog prog;} 
		{
			<proc> id = <identificador> "(" paramf = parametros_formales() ")" prog = programa()
			{return (Dec) sem.dec_proc(id.image, paramf, prog).ponFila(id.beginLine).ponCol(id.beginColumn);}
		}
	ParamF parametros_formales() : 
		{LParam lparam;} 
		{
			lparam = lista_parametros() 
			{return sem.si_parF(lparam);}
			| 
			{return sem.no_parF();}
		}
	LParam lista_parametros() : 
		{Param param; LParam lparam;} 
		{
			param = parametro() lparam = lista_parametros_re(sem.un_param(param))
			{ return lparam; }
		}
	LParam lista_parametros_re(LParam lparamh) : 
		{ Param param; LParam lparam; } 
		{
			"," param = parametro() lparam = lista_parametros_re(sem.muchos_param(lparamh, param))
			{return lparam;}
			| 
			{return lparamh;}
		}
	Param parametro() : 
		{Tipo tipo; Param param;} 
		{
			tipo = tipo() param = parametro_re(tipo)
			{return param;}
		}
	Param parametro_re(Tipo tipoh) : 
		{Token id;} 
		{
			id = <identificador>
			{return (Param)sem.param_cop(tipoh, id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
			| 
			"&" id = <identificador>
			{return (Param)sem.param_ref(tipoh, id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
		}

	Tipo tipo() : 
		{Tipo tipo1, tipore;} 
		{
			tipo1 = tipo1() tipore = tipo_re(tipo1)
			{return tipore;}
		}
	Tipo tipo_re(Tipo tipoh) : 
		{Token ent;} 
		{
			("[" ent = <literal_entero> "]") 
			{return (Tipo)sem.tipo_array(tipoh, ent.image).ponFila(ent.beginLine).ponCol(ent.beginColumn);}
			| 
			{return tipoh;}
		}
	Tipo tipo1() : 
		{ Tipo tipo2; } 
		{ 
			tipo2 =  tipo2()
			{return tipo2;}
		}
	Tipo tipo2() : 
		{Tipo tip; Token id;} 
		{
			"^" tip = tipo1() 
			{return sem.tipo_punt(tip);}
			| 
			<ent>
			{return sem.tipo_int();} 
			| 
			<real> 
			{return sem.tipo_real();} 
			| 
			<bool> 
			{return sem.tipo_bool();} 
			| 
			<string> 
			{return sem.tipo_string();} 
			| 
			id = <identificador> 
			{return (Tipo)sem.tipo_id(id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
			| 
			tip = tipo_struct()
			{return tip;}
		}
	Tipo tipo_struct() : 
		{LStruct lstruct;} 
		{
			<struct> "{" lstruct = lista_struct() "}"
			{return sem.tipo_struct(lstruct);}
		}
	LStruct lista_struct() : 
		{Campo campo; LStruct lstruct;} 
		{
			campo = campo() lstruct = lista_struct_re(sem.info_struct(campo))
			{return lstruct;}
		}
	LStruct lista_struct_re(LStruct lstructh) : 
		{Campo campo; LStruct lstruct;} 
		{
			"," campo = campo() lstruct = lista_struct_re(sem.lista_struct(lstructh, campo)) 
			{return lstruct;}
			| 
			{return lstructh;}
		}
	Campo campo() : 
		{Tipo tipo; Token id;} 
		{
			tipo = tipo() id = <identificador>
			{return (Campo)sem.campo(tipo, id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
		}

	InstrOpt instrucciones_opt() : 
		{LInstr linstr;} 
		{
			linstr = lista_instrucciones() 
			{return sem.si_inst(linstr);} 
			| 
			{return sem.no_inst();}
			}
	LInstr lista_instrucciones() : 
		{Instr inst; LInstr linstr;} 
		{
			inst = instruccion() linstr = lista_instrucciones_re(sem.una_instr(inst))
			{return linstr;}
		}
	LInstr lista_instrucciones_re(LInstr linstrh) : 
		{Instr inst; LInstr linstr;} 
		{
			";" inst = instruccion() linstr = lista_instrucciones_re(sem.muchas_instr(linstrh, inst)) 
			{return linstr;}
			| 
			{return linstrh;}
		}
	Instr instruccion() : 
		{ Instr instr; } 
		{
			instr = instruccion_eval()
			{return instr;} 
			| 
			instr = instruccion_if()
			{return instr;} 
			| 
			instr = instruccion_while()
			{return instr;} 
			| 
			instr = instruccion_read()
			{return instr;} 
			| 
			instr = instruccion_write()
			{return instr;}
			| 
			instr = instruccion_nl()
			{return instr;} 
			| 
			instr = instruccion_reserva()
			{return instr;} 
			| 
			instr = instruccion_libera()
			{return instr;} 
			| 
			instr = instruccion_call()
			{return instr;} 
			| 
			instr = instruccion_compuesta()
			{return instr;}
		}
	Instr instruccion_eval() : 
		{Exp exp;} 
		{
			"@" exp = E0()
			{ return sem.instr_eval(exp); }
		}
	Instr instruccion_if() : 
		{ Exp exp; Prog prog; Instr instr_re; } 
		{
			<If> exp = E0() prog = programa() instr_re = instruccion_if_re(exp, prog)
			{ return instr_re; }
		}
	Instr instruccion_if_re(Exp exp, Prog prog) : 
		{ Prog prog2; } 
		{
			<Else> prog = programa()
			{ return sem.instr_if_else(exp, prog, prog2);}
			|
			{ return sem.instr_if(exp, prog);}
		}
	Instr instruccion_while() : 
		{Exp exp; Prog prog;} 
		{
			<While> exp = E0() prog = programa()
			{ return sem.instr_wh(exp, prog);}
		}
	Instr instruccion_read() : 
		{Exp exp;} 
		{
			<read> exp = E0()
			{ return sem.instr_rd(exp);}
		}
	Instr instruccion_write() : 
		{Exp exp;} 
		{
			<write> exp = E0()
			{ return sem.instr_wr(exp);}
		}
	Instr instruccion_nl() : 
		{} 
		{
			<nl>
			{ return sem.instr_nl();}
		}
	Instr instruccion_reserva() : 
		{Exp exp;} 
		{
			<New> exp = E0()
			{ return sem.instr_new(exp);}
		}
	Instr instruccion_libera() : 
		{Exp exp;} 
		{
			<Delete> exp = E0()
			{ return sem.instr_del(exp);}
		}
	Instr instruccion_call() : 
		{Token id; ParamR param;} 
		{
			<call> id = <identificador> "(" param = parametros_reales() ")"
			{ return (Instr)sem.instr_call(id.image, param).ponFila(id.beginLine).ponCol(id.beginColumn);}
		}
	Instr instruccion_compuesta() :
		{Prog prog;} 
		{
			prog = programa()
			{ return sem.instr_comp(prog);}
		}
	ParamR parametros_reales() : 
		{LParamR params;} 
		{
			params = lista_parametros_reales()
			{return sem.si_param_re(params);}
			| 
			{return sem.no_param_re();}
		}
	LParamR lista_parametros_reales() : 
		{LParamR params; Exp exp;} 
		{
			exp = E0() params = lista_parametros_reales_re(sem.un_param_re(exp))
			{return params;}
		}
	LParamR lista_parametros_reales_re(LParamR paramsh) : 
		{Exp exp; LParamR params;} 
		{
			"," exp = E0() params = lista_parametros_reales_re(sem.muchos_param_re(paramsh, exp))
			{return params;}
			| 
			{return paramsh;}
		}

	Exp E0() : 
		{Exp exp; Exp exp_re;} 
		{
			exp = E1() exp_re = E0RE(exp)
			{return exp_re;}
		}
	Exp E0RE(Exp exph) : 
		{Token op; Exp exp;} 
		{
			op = "=" exp = E0()
			{return (Exp)sem.asig(exph, exp).ponFila(op.beginLine).ponCol(op.beginColumn);}
			| 
			{return exph;}
		}
	Exp E1() : 
		{Exp exp; Exp exp_re;} 
		{
			exp = E2() exp_re = E1RE(exp)
			{return exp_re;}
		}
	Exp E1RE(Exp exph) : 
		{Token op; Exp exp, exp_re;} 
		{
			op = op_relacional() exp = E2() exp_re = E1RE((Exp)sem.op_rel(op.image, exph, exp).ponFila(op.beginLine).ponCol(op.beginColumn))
			{return exp_re;}
			| 
			{return exph;}
		}
	Exp E2() : 
		{Exp exp, exp_re1, exp_re2;} 
		{
			exp = E3() exp_re2 = E2RE(exp) exp_re1 = E2RE1(exp_re2)
			{return exp_re1;}
		}
	Exp E2RE1(Exp exph) : 
		{Token op; Exp exp, exp_re;} 
		{
			op = "+" exp = E3() exp_re = E2RE1((Exp)sem.suma(exph, exp).ponFila(op.beginLine).ponCol(op.beginColumn))
			{return exp_re;}
			| 
			{return exph;}
		}
	Exp E2RE(Exp exph) : 
		{Token op; Exp exp;} 
		{
			op = "-" exp = E3()
			{return (Exp)sem.resta(exph, exp).ponFila(op.beginLine).ponCol(op.beginColumn);}
			| 
			{return exph;}
		}
	Exp E3() : 
		{Exp exp, exp_re;} 
		{
			exp = E4() exp_re = E3RE(exp)
			{return exp_re;}
		} 
	Exp E3RE(Exp exph) : 
		{Token op; Exp exp;} 
		{
			op = <and> exp = E3()
			{return (Exp)sem.and(exph, exp).ponFila(op.beginLine).ponCol(op.beginColumn);} 
			| 
			op = <or> exp = E4()
			{return (Exp)sem.or(exph, exp).ponFila(op.beginLine).ponCol(op.beginColumn);} 
			| 
			{return exph;}
		}
	Exp E4() : 
		{Exp exp, exp_re;} 
		{
			exp = E5() exp_re = E4RE(exp)
			{return exp_re;}
		}
	Exp E4RE(Exp exph) : 
		{Token op; Exp exp, exp_re;} 
		{
			op = op_nivel4() exp = E5() exp_re = E4RE((Exp)sem.op_mul(op.image, exph, exp).ponFila(op.beginLine).ponCol(op.beginColumn))
			{return exp_re;}
			| 
			{return exph;}
		}
	Exp E5() : 
		{Token op; Exp exp;} 
		{
			op = op_nivel5() exp = E5() 
			{return (Exp)sem.op_inv(op.image, exp).ponFila(op.beginLine).ponCol(op.beginColumn);}
			| 
			exp = E6()
			{return exp;}
		}
	Exp E6() : 
		{Exp exp, exp_re;} 
		{
			exp = E7() exp_re = E6RE(exp)
			{return exp_re;}
		}
	Exp E6RE(Exp exph) : 
		{Token corAp, iden, reg; Exp exp, exp_re;} 
		{
			corAp = "[" exp = E0() "]" exp_re = E6RE((Exp)sem.index(exph, exp).ponFila(corAp.beginLine).ponCol(corAp.beginColumn))
			{return exp_re;}
			| 
			"." iden = <identificador> exp_re = E6RE((Exp)sem.reg(exph, iden.image).ponFila(iden.beginLine).ponCol(iden.beginColumn))
			{return exp_re;}
			|
			reg = "^" exp_re = E6RE((Exp)sem.indir(exph).ponFila(reg.beginLine).ponCol(reg.beginColumn))
			{return exp_re;}
			|
			{return exph;}
		}
	Exp E7() : 
		{Exp exp;} 
		{
			"(" exp = E0() ")" 
			{return exp;}
			| 
			exp = op_basico()
			{return exp;}
		}
	Token op_relacional() : 
		{Token op;} 
		{
			op = ">"
			{return op;}
			|
			op = <mayorIgual> 
			{return op;}
			|
			op = "<"
			{return op;}
			|
			op = <menorIgual>
			{return op;}
			|
			op = <igualdad>
			{return op;}
			|
			op = <distinto>
			{return op;}
		}
	Token op_nivel4() : 
		{Token op;} 
		{
			op = "*" 
			{return op;}
			|
			op = "/" 
			{return op;}
			|
			op = "%" 
			{return op;}
		}
	Token op_nivel5() : 
		{Token op;} 
		{
			op = "-"
			{return op;} 
			| 
			op = <not>
			{return op;}
		}
	Exp op_basico() : 
		{Token op;} 
		{
			op = <literal_entero> 
			{return (Exp)sem.literal_ent(op.image).ponFila(op.beginLine).ponCol(op.beginColumn);}
			| 
			op = <literal_real> 
			{return (Exp)sem.literal_real(op.image).ponFila(op.beginLine).ponCol(op.beginColumn);}
			| 
			op = <verdadero> 
			{return (Exp)sem.true_().ponFila(op.beginLine).ponCol(op.beginColumn);}
			|
			op = <falso> 
			{return (Exp)sem.false_().ponFila(op.beginLine).ponCol(op.beginColumn);}
			| 
			op = <literal_cadena> 
			{return (Exp)sem.literal_cadena(op.image).ponFila(op.beginLine).ponCol(op.beginColumn);}
			| 
			op = <identificador> 
			{return (Exp)sem.id(op.image).ponFila(op.beginLine).ponCol(op.beginColumn);}
			| op = <nulo>
			{return (Exp)sem.nulo().ponFila(op.beginLine).ponCol(op.beginColumn);}  
		}