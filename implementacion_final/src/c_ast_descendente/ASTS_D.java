/* Generated By:JavaCC: Do not edit this line. ASTS_D.java */
package c_ast_descendente;

import asint.SintaxisAbstractaEval.*;
import asint.ClaseSemanticaEval;

public class ASTS_D implements ASTS_DConstants {
    private ClaseSemanticaEval sem = new ClaseSemanticaEval();

        public void setTabSize() {
      jj_input_stream.setTabSize(1);
    }

  final public Prog analiza() throws ParseException {
    trace_call("analiza");
    try {
                  Prog prog;
      prog = programa();
      jj_consume_token(0);
                         {if (true) return prog;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("analiza");
    }
  }

  final public Prog programa() throws ParseException {
    trace_call("programa");
    try {
                  Decs decOpt; InstrOpt instrOpt;
      jj_consume_token(41);
      decOpt = declaraciones_opt();
      instrOpt = instrucciones_opt();
      jj_consume_token(42);
                         {if (true) return sem.prog(decOpt, instrOpt);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("programa");
    }
  }

  final public Decs declaraciones_opt() throws ParseException {
    trace_call("declaraciones_opt");
    try {
                  LDecs ldecs;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ent:
      case real:
      case bool:
      case string:
      case proc:
      case struct:
      case type:
      case identificador:
      case 46:
        ldecs = lista_declaraciones();
        jj_consume_token(cambioSec);
                         {if (true) return sem.si_decs(ldecs);}
        break;
      default:
        jj_la1[0] = jj_gen;
                         {if (true) return sem.no_decs();}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("declaraciones_opt");
    }
  }

  final public LDecs lista_declaraciones() throws ParseException {
    trace_call("lista_declaraciones");
    try {
                  Dec dec; LDecs ldecs;
      dec = declaracion();
      ldecs = lista_declaraciones_re(sem.una_dec(dec));
                          {if (true) return ldecs;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lista_declaraciones");
    }
  }

  final public LDecs lista_declaraciones_re(LDecs ldech) throws ParseException {
    trace_call("lista_declaraciones_re");
    try {
                  Dec dec; LDecs ldecs;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 43:
        jj_consume_token(43);
        dec = declaracion();
        ldecs = lista_declaraciones_re(sem.muchas_decs(ldech,dec));
                         {if (true) return ldecs;}
        break;
      default:
        jj_la1[1] = jj_gen;
                         {if (true) return ldech;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lista_declaraciones_re");
    }
  }

  final public Dec declaracion() throws ParseException {
    trace_call("declaracion");
    try {
                  Dec dec;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ent:
      case real:
      case bool:
      case string:
      case struct:
      case identificador:
      case 46:
        dec = declaracion_variable();
                         {if (true) return dec;}
        break;
      case type:
        dec = declaracion_tipo();
                         {if (true) return dec;}
        break;
      case proc:
        dec = declaracion_proc();
                         {if (true) return dec;}
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("declaracion");
    }
  }

  final public Dec declaracion_variable() throws ParseException {
    trace_call("declaracion_variable");
    try {
                 Tipo tipo; Token id;
      tipo = tipo();
      id = jj_consume_token(identificador);
                          {if (true) return (Dec)sem.dec_id(tipo, id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("declaracion_variable");
    }
  }

  final public Dec declaracion_tipo() throws ParseException {
    trace_call("declaracion_tipo");
    try {
                 Tipo tipo; Token id;
      jj_consume_token(type);
      tipo = tipo();
      id = jj_consume_token(identificador);
                         {if (true) return (Dec)sem.dec_type(tipo, id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("declaracion_tipo");
    }
  }

  final public Tipo tipo() throws ParseException {
    trace_call("tipo");
    try {
                 Tipo tipo1, tipore;
      tipo1 = tipo1();
      tipore = tipo_re(tipo1);
                         {if (true) return tipore;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("tipo");
    }
  }

  final public Tipo tipo_re(Tipo tipoh) throws ParseException {
    trace_call("tipo_re");
    try {
                 Token ent; Tipo tipo_re;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 44:
        jj_consume_token(44);
        ent = jj_consume_token(literal_entero);
        jj_consume_token(45);
        tipo_re = tipo_re((Tipo)sem.tipo_array(tipoh, ent.image).ponFila(ent.beginLine).ponCol(ent.beginColumn));
                         {if (true) return tipo_re;}
        break;
      default:
        jj_la1[3] = jj_gen;
                         {if (true) return tipoh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("tipo_re");
    }
  }

  final public Tipo tipo1() throws ParseException {
    trace_call("tipo1");
    try {
                  Tipo tipo2;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 46:
        jj_consume_token(46);
        tipo2 = tipo1();
                         {if (true) return sem.tipo_punt(tipo2);}
        break;
      case ent:
      case real:
      case bool:
      case string:
      case struct:
      case identificador:
        tipo2 = tipo2();
                         {if (true) return tipo2;}
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("tipo1");
    }
  }

  final public Tipo tipo2() throws ParseException {
    trace_call("tipo2");
    try {
                 Tipo tip; Token id;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ent:
        jj_consume_token(ent);
                         {if (true) return sem.tipo_int();}
        break;
      case real:
        jj_consume_token(real);
                         {if (true) return sem.tipo_real();}
        break;
      case bool:
        jj_consume_token(bool);
                         {if (true) return sem.tipo_bool();}
        break;
      case string:
        jj_consume_token(string);
                         {if (true) return sem.tipo_string();}
        break;
      case identificador:
        id = jj_consume_token(identificador);
                         {if (true) return (Tipo)sem.tipo_id(id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
        break;
      case struct:
        tip = tipo_struct();
                         {if (true) return tip;}
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("tipo2");
    }
  }

  final public Tipo tipo_struct() throws ParseException {
    trace_call("tipo_struct");
    try {
                 LStruct lstruct;
      jj_consume_token(struct);
      jj_consume_token(41);
      lstruct = lista_struct();
      jj_consume_token(42);
                         {if (true) return sem.tipo_struct(lstruct);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("tipo_struct");
    }
  }

  final public LStruct lista_struct() throws ParseException {
    trace_call("lista_struct");
    try {
                 LStruct lstruct; Campo campo;
      campo = campo();
      lstruct = lista_struct_re(sem.info_struct(campo));
                         {if (true) return lstruct;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lista_struct");
    }
  }

  final public LStruct lista_struct_re(LStruct lstructh) throws ParseException {
    trace_call("lista_struct_re");
    try {
                 LStruct lstruct; Campo campo;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 47:
        jj_consume_token(47);
        campo = campo();
        lstruct = lista_struct_re(sem.lista_struct(lstructh, campo));
                         {if (true) return lstruct;}
        break;
      default:
        jj_la1[6] = jj_gen;
                         {if (true) return lstructh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lista_struct_re");
    }
  }

  final public Campo campo() throws ParseException {
    trace_call("campo");
    try {
                 Tipo tipo; Token id;
      tipo = tipo();
      id = jj_consume_token(identificador);
                         {if (true) return (Campo)sem.campo(tipo, id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("campo");
    }
  }

  final public Dec declaracion_proc() throws ParseException {
    trace_call("declaracion_proc");
    try {
                 Token id; ParamF paramf; Prog prog;
      jj_consume_token(proc);
      id = jj_consume_token(identificador);
      jj_consume_token(48);
      paramf = parametros_formales();
      jj_consume_token(49);
      prog = programa();
                         {if (true) return (Dec) sem.dec_proc(id.image, paramf, prog).ponFila(id.beginLine).ponCol(id.beginColumn);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("declaracion_proc");
    }
  }

  final public ParamF parametros_formales() throws ParseException {
    trace_call("parametros_formales");
    try {
                 LParam lparam;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ent:
      case real:
      case bool:
      case string:
      case struct:
      case identificador:
      case 46:
        lparam = lista_parametros();
                         {if (true) return sem.si_parF(lparam);}
        break;
      default:
        jj_la1[7] = jj_gen;
                         {if (true) return sem.no_parF();}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("parametros_formales");
    }
  }

  final public LParam lista_parametros() throws ParseException {
    trace_call("lista_parametros");
    try {
                 Param param; LParam lparam;
      param = parametro();
      lparam = lista_parametros_re(sem.un_param(param));
                          {if (true) return lparam;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lista_parametros");
    }
  }

  final public LParam lista_parametros_re(LParam lparamh) throws ParseException {
    trace_call("lista_parametros_re");
    try {
                  Param param; LParam lparam;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 47:
        jj_consume_token(47);
        param = parametro();
        lparam = lista_parametros_re(sem.muchos_param(lparamh, param));
                         {if (true) return lparam;}
        break;
      default:
        jj_la1[8] = jj_gen;
                         {if (true) return lparamh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lista_parametros_re");
    }
  }

  final public Param parametro() throws ParseException {
    trace_call("parametro");
    try {
                 Tipo tipo; Param param;
      tipo = tipo();
      param = parametro_re(tipo);
                         {if (true) return param;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("parametro");
    }
  }

  final public Param parametro_re(Tipo tipoh) throws ParseException {
    trace_call("parametro_re");
    try {
                 Token id;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case identificador:
        id = jj_consume_token(identificador);
                         {if (true) return (Param)sem.param_cop(tipoh, id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
        break;
      case 50:
        jj_consume_token(50);
        id = jj_consume_token(identificador);
                         {if (true) return (Param)sem.param_ref(tipoh, id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("parametro_re");
    }
  }

  final public InstrOpt instrucciones_opt() throws ParseException {
    trace_call("instrucciones_opt");
    try {
                 LInstr linstr;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case If:
      case While:
      case New:
      case Delete:
      case read:
      case write:
      case nl:
      case call:
      case 41:
      case 51:
        linstr = lista_instrucciones();
                         {if (true) return sem.si_inst(linstr);}
        break;
      default:
        jj_la1[10] = jj_gen;
                         {if (true) return sem.no_inst();}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instrucciones_opt");
    }
  }

  final public LInstr lista_instrucciones() throws ParseException {
    trace_call("lista_instrucciones");
    try {
                 Instr inst; LInstr linstr;
      inst = instruccion();
      linstr = lista_instrucciones_re(sem.una_instr(inst));
                         {if (true) return linstr;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lista_instrucciones");
    }
  }

  final public LInstr lista_instrucciones_re(LInstr linstrh) throws ParseException {
    trace_call("lista_instrucciones_re");
    try {
                 Instr inst; LInstr linstr;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 43:
        jj_consume_token(43);
        inst = instruccion();
        linstr = lista_instrucciones_re(sem.muchas_instr(linstrh, inst));
                         {if (true) return linstr;}
        break;
      default:
        jj_la1[11] = jj_gen;
                         {if (true) return linstrh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lista_instrucciones_re");
    }
  }

  final public Instr instruccion() throws ParseException {
    trace_call("instruccion");
    try {
                  Instr instr;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 51:
        instr = instruccion_eval();
                         {if (true) return instr;}
        break;
      case If:
        instr = instruccion_if();
                         {if (true) return instr;}
        break;
      case While:
        instr = instruccion_while();
                         {if (true) return instr;}
        break;
      case read:
        instr = instruccion_read();
                         {if (true) return instr;}
        break;
      case write:
        instr = instruccion_write();
                         {if (true) return instr;}
        break;
      case nl:
        instr = instruccion_nl();
                         {if (true) return instr;}
        break;
      case New:
        instr = instruccion_reserva();
                         {if (true) return instr;}
        break;
      case Delete:
        instr = instruccion_libera();
                         {if (true) return instr;}
        break;
      case call:
        instr = instruccion_call();
                         {if (true) return instr;}
        break;
      case 41:
        instr = instruccion_compuesta();
                         {if (true) return instr;}
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion");
    }
  }

  final public Instr instruccion_eval() throws ParseException {
    trace_call("instruccion_eval");
    try {
                 Exp exp;
      jj_consume_token(51);
      exp = E0();
                          {if (true) return sem.instr_eval(exp);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion_eval");
    }
  }

  final public Instr instruccion_if() throws ParseException {
    trace_call("instruccion_if");
    try {
                  Exp exp; Prog prog; Instr instr_re;
      jj_consume_token(If);
      exp = E0();
      prog = programa();
      instr_re = instruccion_if_re(exp, prog);
                          {if (true) return instr_re;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion_if");
    }
  }

  final public Instr instruccion_if_re(Exp exp, Prog prog) throws ParseException {
    trace_call("instruccion_if_re");
    try {
                  Prog prog2;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Else:
        jj_consume_token(Else);
        prog2 = programa();
                          {if (true) return sem.instr_else(exp, prog, prog2);}
        break;
      default:
        jj_la1[13] = jj_gen;
                          {if (true) return sem.instr_if(exp, prog);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion_if_re");
    }
  }

  final public Instr instruccion_while() throws ParseException {
    trace_call("instruccion_while");
    try {
                 Exp exp; Prog prog;
      jj_consume_token(While);
      exp = E0();
      prog = programa();
                          {if (true) return sem.instr_wh(exp, prog);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion_while");
    }
  }

  final public Instr instruccion_read() throws ParseException {
    trace_call("instruccion_read");
    try {
                 Exp exp;
      jj_consume_token(read);
      exp = E0();
                          {if (true) return sem.instr_rd(exp);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion_read");
    }
  }

  final public Instr instruccion_write() throws ParseException {
    trace_call("instruccion_write");
    try {
                 Exp exp;
      jj_consume_token(write);
      exp = E0();
                          {if (true) return sem.instr_wr(exp);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion_write");
    }
  }

  final public Instr instruccion_nl() throws ParseException {
    trace_call("instruccion_nl");
    try {
      jj_consume_token(nl);
                          {if (true) return sem.instr_nl();}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion_nl");
    }
  }

  final public Instr instruccion_reserva() throws ParseException {
    trace_call("instruccion_reserva");
    try {
                 Exp exp;
      jj_consume_token(New);
      exp = E0();
                          {if (true) return sem.instr_new(exp);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion_reserva");
    }
  }

  final public Instr instruccion_libera() throws ParseException {
    trace_call("instruccion_libera");
    try {
                 Exp exp;
      jj_consume_token(Delete);
      exp = E0();
                          {if (true) return sem.instr_del(exp);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion_libera");
    }
  }

  final public Instr instruccion_call() throws ParseException {
    trace_call("instruccion_call");
    try {
                 Token id; ParamR param;
      jj_consume_token(call);
      id = jj_consume_token(identificador);
      jj_consume_token(48);
      param = parametros_reales();
      jj_consume_token(49);
                          {if (true) return (Instr)sem.instr_call(id.image, param).ponFila(id.beginLine).ponCol(id.beginColumn);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion_call");
    }
  }

  final public Instr instruccion_compuesta() throws ParseException {
    trace_call("instruccion_compuesta");
    try {
                 Prog prog;
      prog = programa();
                          {if (true) return sem.instr_comp(prog);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion_compuesta");
    }
  }

  final public ParamR parametros_reales() throws ParseException {
    trace_call("parametros_reales");
    try {
                 LParamR params;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case not:
      case nulo:
      case falso:
      case verdadero:
      case identificador:
      case literal_entero:
      case literal_cadena:
      case literal_real:
      case 48:
      case 54:
        params = lista_parametros_reales();
                         {if (true) return sem.si_param_re(params);}
        break;
      default:
        jj_la1[14] = jj_gen;
                         {if (true) return sem.no_param_re();}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("parametros_reales");
    }
  }

  final public LParamR lista_parametros_reales() throws ParseException {
    trace_call("lista_parametros_reales");
    try {
                 LParamR params; Exp exp;
      exp = E0();
      params = lista_parametros_reales_re(sem.un_param_re(exp));
                         {if (true) return params;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lista_parametros_reales");
    }
  }

  final public LParamR lista_parametros_reales_re(LParamR paramsh) throws ParseException {
    trace_call("lista_parametros_reales_re");
    try {
                 Exp exp; LParamR params;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 47:
        jj_consume_token(47);
        exp = E0();
        params = lista_parametros_reales_re(sem.muchos_param_re(paramsh, exp));
                         {if (true) return params;}
        break;
      default:
        jj_la1[15] = jj_gen;
                         {if (true) return paramsh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lista_parametros_reales_re");
    }
  }

  final public Exp E0() throws ParseException {
    trace_call("E0");
    try {
                 Exp exp; Exp exp_re;
      exp = E1();
      exp_re = E0RE(exp);
                         {if (true) return exp_re;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("E0");
    }
  }

  final public Exp E0RE(Exp exph) throws ParseException {
    trace_call("E0RE");
    try {
                 Token op; Exp exp;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
        op = jj_consume_token(52);
        exp = E0();
                         {if (true) return (Exp)sem.asig(exph, exp).ponFila(op.beginLine).ponCol(op.beginColumn);}
        break;
      default:
        jj_la1[16] = jj_gen;
                         {if (true) return exph;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("E0RE");
    }
  }

  final public Exp E1() throws ParseException {
    trace_call("E1");
    try {
                 Exp exp; Exp exp_re;
      exp = E2();
      exp_re = E1RE(exp);
                         {if (true) return exp_re;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("E1");
    }
  }

  final public Exp E1RE(Exp exph) throws ParseException {
    trace_call("E1RE");
    try {
                 Token op; Exp exp, exp_re;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case menorIgual:
      case mayorIgual:
      case igualdad:
      case distinto:
      case 56:
      case 57:
        op = op_relacional();
        exp = E2();
        exp_re = E1RE((Exp)sem.op_rel(op.image, exph, exp).ponFila(op.beginLine).ponCol(op.beginColumn));
                         {if (true) return exp_re;}
        break;
      default:
        jj_la1[17] = jj_gen;
                         {if (true) return exph;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("E1RE");
    }
  }

  final public Exp E2() throws ParseException {
    trace_call("E2");
    try {
                 Exp exp, exp_re1, exp_re2;
      exp = E3();
      exp_re2 = E2RE(exp);
      exp_re1 = E2RE1(exp_re2);
                         {if (true) return exp_re1;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("E2");
    }
  }

  final public Exp E2RE1(Exp exph) throws ParseException {
    trace_call("E2RE1");
    try {
                 Token op; Exp exp, exp_re;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
        op = jj_consume_token(53);
        exp = E3();
        exp_re = E2RE1((Exp)sem.suma(exph, exp).ponFila(op.beginLine).ponCol(op.beginColumn));
                         {if (true) return exp_re;}
        break;
      default:
        jj_la1[18] = jj_gen;
                         {if (true) return exph;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("E2RE1");
    }
  }

  final public Exp E2RE(Exp exph) throws ParseException {
    trace_call("E2RE");
    try {
                 Token op; Exp exp;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 54:
        op = jj_consume_token(54);
        exp = E3();
                         {if (true) return (Exp)sem.resta(exph, exp).ponFila(op.beginLine).ponCol(op.beginColumn);}
        break;
      default:
        jj_la1[19] = jj_gen;
                         {if (true) return exph;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("E2RE");
    }
  }

  final public Exp E3() throws ParseException {
    trace_call("E3");
    try {
                 Exp exp, exp_re;
      exp = E4();
      exp_re = E3RE(exp);
                         {if (true) return exp_re;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("E3");
    }
  }

  final public Exp E3RE(Exp exph) throws ParseException {
    trace_call("E3RE");
    try {
                 Token op; Exp exp;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case and:
        op = jj_consume_token(and);
        exp = E3();
                         {if (true) return (Exp)sem.and(exph, exp).ponFila(op.beginLine).ponCol(op.beginColumn);}
        break;
      case or:
        op = jj_consume_token(or);
        exp = E4();
                         {if (true) return (Exp)sem.or(exph, exp).ponFila(op.beginLine).ponCol(op.beginColumn);}
        break;
      default:
        jj_la1[20] = jj_gen;
                         {if (true) return exph;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("E3RE");
    }
  }

  final public Exp E4() throws ParseException {
    trace_call("E4");
    try {
                 Exp exp, exp_re;
      exp = E5();
      exp_re = E4RE(exp);
                         {if (true) return exp_re;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("E4");
    }
  }

  final public Exp E4RE(Exp exph) throws ParseException {
    trace_call("E4RE");
    try {
                 Token op; Exp exp, exp_re;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 58:
      case 59:
      case 60:
        op = op_nivel4();
        exp = E5();
        exp_re = E4RE((Exp)sem.op_mul(op.image, exph, exp).ponFila(op.beginLine).ponCol(op.beginColumn));
                         {if (true) return exp_re;}
        break;
      default:
        jj_la1[21] = jj_gen;
                         {if (true) return exph;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("E4RE");
    }
  }

  final public Exp E5() throws ParseException {
    trace_call("E5");
    try {
                 Token op; Exp exp;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case not:
      case 54:
        op = op_nivel5();
        exp = E5();
                         {if (true) return (Exp)sem.op_inv(op.image, exp).ponFila(op.beginLine).ponCol(op.beginColumn);}
        break;
      case nulo:
      case falso:
      case verdadero:
      case identificador:
      case literal_entero:
      case literal_cadena:
      case literal_real:
      case 48:
        exp = E6();
                         {if (true) return exp;}
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("E5");
    }
  }

  final public Exp E6() throws ParseException {
    trace_call("E6");
    try {
                 Exp exp, exp_re;
      exp = E7();
      exp_re = E6RE(exp);
                         {if (true) return exp_re;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("E6");
    }
  }

  final public Exp E6RE(Exp exph) throws ParseException {
    trace_call("E6RE");
    try {
                 Token corAp, iden, reg; Exp exp, exp_re;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 44:
        corAp = jj_consume_token(44);
        exp = E0();
        jj_consume_token(45);
        exp_re = E6RE((Exp)sem.index(exph, exp).ponFila(corAp.beginLine).ponCol(corAp.beginColumn));
                         {if (true) return exp_re;}
        break;
      case 55:
        jj_consume_token(55);
        iden = jj_consume_token(identificador);
        exp_re = E6RE((Exp)sem.reg(exph, iden.image).ponFila(iden.beginLine).ponCol(iden.beginColumn));
                         {if (true) return exp_re;}
        break;
      case 46:
        reg = jj_consume_token(46);
        exp_re = E6RE((Exp)sem.indir(exph).ponFila(reg.beginLine).ponCol(reg.beginColumn));
                         {if (true) return exp_re;}
        break;
      default:
        jj_la1[23] = jj_gen;
                         {if (true) return exph;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("E6RE");
    }
  }

  final public Exp E7() throws ParseException {
    trace_call("E7");
    try {
                 Exp exp;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 48:
        jj_consume_token(48);
        exp = E0();
        jj_consume_token(49);
                         {if (true) return exp;}
        break;
      case nulo:
      case falso:
      case verdadero:
      case identificador:
      case literal_entero:
      case literal_cadena:
      case literal_real:
        exp = op_basico();
                         {if (true) return exp;}
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("E7");
    }
  }

  final public Token op_relacional() throws ParseException {
    trace_call("op_relacional");
    try {
                 Token op;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 56:
        op = jj_consume_token(56);
                         {if (true) return op;}
        break;
      case mayorIgual:
        op = jj_consume_token(mayorIgual);
                         {if (true) return op;}
        break;
      case 57:
        op = jj_consume_token(57);
                         {if (true) return op;}
        break;
      case menorIgual:
        op = jj_consume_token(menorIgual);
                         {if (true) return op;}
        break;
      case igualdad:
        op = jj_consume_token(igualdad);
                         {if (true) return op;}
        break;
      case distinto:
        op = jj_consume_token(distinto);
                         {if (true) return op;}
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("op_relacional");
    }
  }

  final public Token op_nivel4() throws ParseException {
    trace_call("op_nivel4");
    try {
                 Token op;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 58:
        op = jj_consume_token(58);
                         {if (true) return op;}
        break;
      case 59:
        op = jj_consume_token(59);
                         {if (true) return op;}
        break;
      case 60:
        op = jj_consume_token(60);
                         {if (true) return op;}
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("op_nivel4");
    }
  }

  final public Token op_nivel5() throws ParseException {
    trace_call("op_nivel5");
    try {
                 Token op;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 54:
        op = jj_consume_token(54);
                         {if (true) return op;}
        break;
      case not:
        op = jj_consume_token(not);
                         {if (true) return op;}
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("op_nivel5");
    }
  }

  final public Exp op_basico() throws ParseException {
    trace_call("op_basico");
    try {
                 Token op;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case literal_entero:
        op = jj_consume_token(literal_entero);
                         {if (true) return (Exp)sem.literal_ent(op.image).ponFila(op.beginLine).ponCol(op.beginColumn);}
        break;
      case literal_real:
        op = jj_consume_token(literal_real);
                         {if (true) return (Exp)sem.literal_real(op.image).ponFila(op.beginLine).ponCol(op.beginColumn);}
        break;
      case verdadero:
        op = jj_consume_token(verdadero);
                         {if (true) return (Exp)sem.true_().ponFila(op.beginLine).ponCol(op.beginColumn);}
        break;
      case falso:
        op = jj_consume_token(falso);
                         {if (true) return (Exp)sem.false_().ponFila(op.beginLine).ponCol(op.beginColumn);}
        break;
      case literal_cadena:
        op = jj_consume_token(literal_cadena);
                         {if (true) return (Exp)sem.literal_cadena(op.image).ponFila(op.beginLine).ponCol(op.beginColumn);}
        break;
      case identificador:
        op = jj_consume_token(identificador);
                         {if (true) return (Exp)sem.id(op.image).ponFila(op.beginLine).ponCol(op.beginColumn);}
        break;
      case nulo:
        op = jj_consume_token(nulo);
                         {if (true) return (Exp)sem.nulo().ponFila(op.beginLine).ponCol(op.beginColumn);}
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("op_basico");
    }
  }

  /** Generated Token Manager. */
  public ASTS_DTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x50447800,0x0,0x50447800,0x0,0x40407800,0x40407800,0x0,0x40407800,0x0,0x40000000,0x2fa80000,0x0,0x2fa80000,0x100000,0xc0038400,0x0,0x0,0x0,0x0,0x0,0x300,0x0,0xc0038400,0x0,0xc0038000,0x0,0x0,0x400,0xc0038000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4000,0x800,0x4000,0x1000,0x4000,0x0,0x8000,0x4000,0x8000,0x40000,0x80200,0x800,0x80200,0x0,0x410003,0x8000,0x100000,0x300003c,0x200000,0x400000,0x0,0x1c000000,0x410003,0x805000,0x10003,0x300003c,0x1c000000,0x400000,0x3,};
   }

  /** Constructor with InputStream. */
  public ASTS_D(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ASTS_D(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ASTS_DTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ASTS_D(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ASTS_DTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ASTS_D(ASTS_DTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ASTS_DTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[61];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 61; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  protected void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
